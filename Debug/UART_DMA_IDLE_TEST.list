
UART_DMA_IDLE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006d60  08006d60  00016d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007048  08007048  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007050  08007050  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cac  200001dc  08007234  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e88  08007234  00020e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6a9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff0  00000000  00000000  0002b8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001709d  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000990a  00000000  00000000  00045a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b225  00000000  00000000  0004f38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da5b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  000da630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d44 	.word	0x08006d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006d44 	.word	0x08006d44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_DMA_Init+0xa8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2010      	movs	r0, #16
 8000efc:	f001 f9c9 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f00:	2010      	movs	r0, #16
 8000f02:	f001 f9e2 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2011      	movs	r0, #17
 8000f0c:	f001 f9c1 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f10:	2011      	movs	r0, #17
 8000f12:	f001 f9da 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2039      	movs	r0, #57	; 0x39
 8000f1c:	f001 f9b9 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f20:	2039      	movs	r0, #57	; 0x39
 8000f22:	f001 f9d2 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	203a      	movs	r0, #58	; 0x3a
 8000f2c:	f001 f9b1 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f30:	203a      	movs	r0, #58	; 0x3a
 8000f32:	f001 f9ca 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2045      	movs	r0, #69	; 0x45
 8000f3c:	f001 f9a9 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f40:	2045      	movs	r0, #69	; 0x45
 8000f42:	f001 f9c2 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2046      	movs	r0, #70	; 0x46
 8000f4c:	f001 f9a1 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f50:	2046      	movs	r0, #70	; 0x46
 8000f52:	f001 f9ba 	bl	80022ca <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a2c      	ldr	r2, [pc, #176]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a25      	ldr	r2, [pc, #148]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a17      	ldr	r2, [pc, #92]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_GPIO_Init+0xd0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000ff0:	f001 fe98 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_GPIO_Init+0xd8>)
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_GPIO_Init+0xdc>)
 800100a:	f001 fd09 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800100e:	2320      	movs	r3, #32
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_GPIO_Init+0xd4>)
 8001026:	f001 fcfb 	bl	8002a20 <HAL_GPIO_Init>

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	10210000 	.word	0x10210000
 8001040:	40020800 	.word	0x40020800

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0a2      	sub	sp, #136	; 0x88
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 ffd5 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f869 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f7ff ff87 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001056:	f7ff ff2f 	bl	8000eb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800105a:	f000 fd53 	bl	8001b04 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800105e:	f000 f8eb 	bl	8001238 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001062:	f000 fd25 	bl	8001ab0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001066:	f000 fd77 	bl	8001b58 <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  Serial_init(&uart_1, &huart1);
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <main+0xb0>)
 800106c:	4822      	ldr	r0, [pc, #136]	; (80010f8 <main+0xb4>)
 800106e:	f000 fa4b 	bl	8001508 <Serial_init>
  Serial_init(&uart_pc, &huart2);
 8001072:	4922      	ldr	r1, [pc, #136]	; (80010fc <main+0xb8>)
 8001074:	4822      	ldr	r0, [pc, #136]	; (8001100 <main+0xbc>)
 8001076:	f000 fa47 	bl	8001508 <Serial_init>
  Serial_init(&uart_6, &huart6);
 800107a:	4922      	ldr	r1, [pc, #136]	; (8001104 <main+0xc0>)
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <main+0xc4>)
 800107e:	f000 fa43 	bl	8001508 <Serial_init>
  Serial_print(&uart_pc, "System start - uart2\n\r");
 8001082:	4922      	ldr	r1, [pc, #136]	; (800110c <main+0xc8>)
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <main+0xbc>)
 8001086:	f000 fb6a 	bl	800175e <Serial_print>
  Serial_print(&uart_1, "System start - uart1\n\r");
 800108a:	4921      	ldr	r1, [pc, #132]	; (8001110 <main+0xcc>)
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <main+0xb4>)
 800108e:	f000 fb66 	bl	800175e <Serial_print>
  Serial_print(&uart_6, "System start - uart6\n\r");
 8001092:	4920      	ldr	r1, [pc, #128]	; (8001114 <main+0xd0>)
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <main+0xc4>)
 8001096:	f000 fb62 	bl	800175e <Serial_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t avail = Serial_available(&uart_pc);
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <main+0xbc>)
 800109c:	f000 fb15 	bl	80016ca <Serial_available>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	  if(avail) {
 80010a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f5      	beq.n	800109a <main+0x56>
		  Serial_print(&uart_pc, "new message no.");
 80010ae:	491a      	ldr	r1, [pc, #104]	; (8001118 <main+0xd4>)
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <main+0xbc>)
 80010b2:	f000 fb54 	bl	800175e <Serial_print>
		  message_n++;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <main+0xd8>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0xd8>)
 80010c0:	801a      	strh	r2, [r3, #0]
		  Serial_print_int(&uart_pc, message_n);
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <main+0xd8>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <main+0xbc>)
 80010ca:	f000 fb5d 	bl	8001788 <Serial_print_int>
		  Serial_print(&uart_pc, ":");
 80010ce:	4914      	ldr	r1, [pc, #80]	; (8001120 <main+0xdc>)
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <main+0xbc>)
 80010d2:	f000 fb44 	bl	800175e <Serial_print>
		  char command[128];
		  Serial_read_line(&uart_pc, command);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <main+0xbc>)
 80010dc:	f000 fad3 	bl	8001686 <Serial_read_line>
		  Serial_print(&uart_pc, command);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <main+0xbc>)
 80010e6:	f000 fb3a 	bl	800175e <Serial_print>
		  Serial_println(&uart_pc);
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <main+0xbc>)
 80010ec:	f000 fb68 	bl	80017c0 <Serial_println>
  {
 80010f0:	e7d3      	b.n	800109a <main+0x56>
 80010f2:	bf00      	nop
 80010f4:	20000dc0 	.word	0x20000dc0
 80010f8:	20000530 	.word	0x20000530
 80010fc:	20000e40 	.word	0x20000e40
 8001100:	20000848 	.word	0x20000848
 8001104:	20000e00 	.word	0x20000e00
 8001108:	20000218 	.word	0x20000218
 800110c:	08006d60 	.word	0x08006d60
 8001110:	08006d78 	.word	0x08006d78
 8001114:	08006d90 	.word	0x08006d90
 8001118:	08006da8 	.word	0x08006da8
 800111c:	200001f8 	.word	0x200001f8
 8001120:	08006db8 	.word	0x08006db8

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	; 0x68
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fdcb 	bl	8004cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <SystemClock_Config+0xfc>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <SystemClock_Config+0xfc>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <SystemClock_Config+0xfc>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <SystemClock_Config+0x100>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <SystemClock_Config+0x100>)
 8001180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <SystemClock_Config+0x100>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001192:	2309      	movs	r3, #9
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001196:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011ae:	2364      	movs	r3, #100	; 0x64
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b6:	2304      	movs	r3, #4
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fdca 	bl	8002d58 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011ca:	f000 f82d 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2103      	movs	r1, #3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f824 	bl	8003238 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80011f6:	f000 f817 	bl	8001228 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fa07 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001214:	f000 f808 	bl	8001228 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3768      	adds	r7, #104	; 0x68
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_RTC_Init+0xac>)
 8001252:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <MX_RTC_Init+0xb0>)
 8001254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_RTC_Init+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_RTC_Init+0xac>)
 800125e:	227f      	movs	r2, #127	; 0x7f
 8001260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_RTC_Init+0xac>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_RTC_Init+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_RTC_Init+0xac>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_RTC_Init+0xac>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <MX_RTC_Init+0xac>)
 800127c:	f002 fabe 	bl	80037fc <HAL_RTC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001286:	f7ff ffcf 	bl	8001228 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x14;
 800128a:	2314      	movs	r3, #20
 800128c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 800128e:	2310      	movs	r3, #16
 8001290:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001292:	2300      	movs	r3, #0
 8001294:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_RTC_Init+0xac>)
 80012a6:	f002 fb3a 	bl	800391e <HAL_RTC_SetTime>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f7ff ffba 	bl	8001228 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80012b4:	2307      	movs	r3, #7
 80012b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80012b8:	2305      	movs	r3, #5
 80012ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 80012bc:	2302      	movs	r3, #2
 80012be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2201      	movs	r2, #1
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_RTC_Init+0xac>)
 80012cc:	f002 fbe4 	bl	8003a98 <HAL_RTC_SetDate>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80012d6:	f7ff ffa7 	bl	8001228 <Error_Handler>
  }

}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000b60 	.word	0x20000b60
 80012e8:	40002800 	.word	0x40002800

080012ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_RTC_MspInit+0x24>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d102      	bne.n	8001304 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RTC_MspInit+0x28>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40002800 	.word	0x40002800
 8001314:	42470e3c 	.word	0x42470e3c

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001356:	2007      	movs	r0, #7
 8001358:	f000 ff90 	bl	800227c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 fe6e 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <DMA1_Stream5_IRQHandler+0x10>)
 80013ca:	f001 f8c1 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000b80 	.word	0x20000b80

080013d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA1_Stream6_IRQHandler+0x10>)
 80013de:	f001 f8b7 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000d60 	.word	0x20000d60

080013ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <USART1_IRQHandler+0x14>)
 80013f2:	f002 fda3 	bl	8003f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  User_UART_IRQHandler(&huart1);
 80013f6:	4802      	ldr	r0, [pc, #8]	; (8001400 <USART1_IRQHandler+0x14>)
 80013f8:	f000 faf1 	bl	80019de <User_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000dc0 	.word	0x20000dc0

08001404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <USART2_IRQHandler+0x14>)
 800140a:	f002 fd97 	bl	8003f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  User_UART_IRQHandler(&huart2);
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <USART2_IRQHandler+0x14>)
 8001410:	f000 fae5 	bl	80019de <User_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000e40 	.word	0x20000e40

0800141c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA2_Stream1_IRQHandler+0x10>)
 8001422:	f001 f895 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000be0 	.word	0x20000be0

08001430 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA2_Stream2_IRQHandler+0x10>)
 8001436:	f001 f88b 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000d00 	.word	0x20000d00

08001444 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA2_Stream6_IRQHandler+0x10>)
 800144a:	f001 f881 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000ca0 	.word	0x20000ca0

08001458 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream7_IRQHandler+0x10>)
 800145e:	f001 f877 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000c40 	.word	0x20000c40

0800146c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <USART6_IRQHandler+0x14>)
 8001472:	f002 fd63 	bl	8003f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  User_UART_IRQHandler(&huart6);
 8001476:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART6_IRQHandler+0x14>)
 8001478:	f000 fab1 	bl	80019de <User_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000e00 	.word	0x20000e00

08001484 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x50>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x16>
		heap_end = &end;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <_sbrk+0x50>)
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <_sbrk+0x54>)
 8001498:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <_sbrk+0x50>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <_sbrk+0x50>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	466a      	mov	r2, sp
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d907      	bls.n	80014be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ae:	f003 fbd9 	bl	8004c64 <__errno>
 80014b2:	4602      	mov	r2, r0
 80014b4:	230c      	movs	r3, #12
 80014b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014bc:	e006      	b.n	80014cc <_sbrk+0x48>
	}

	heap_end += incr;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <_sbrk+0x50>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <_sbrk+0x50>)
 80014c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200001fc 	.word	0x200001fc
 80014d8:	20000e88 	.word	0x20000e88

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x28>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x28>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0x28>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f6:	609a      	str	r2, [r3, #8]
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Serial_init>:
//variables
UART_BufferTypeDef *uart_tab[3] = { NULL, NULL, NULL };
uint8_t uart_tab_idx = 0;
extern UART_BufferTypeDef uart_pc;

void Serial_init(UART_BufferTypeDef *uart, UART_HandleTypeDef *huart) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	//read_tail = 0;
	uart->huart = huart;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]
	uart->rx_tail = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	uart->rx_head = 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
	uart->tx_tail = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
	uart->tx_head = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
	uart->tx_message_idx_head = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
	uart->tx_message_idx_tail = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	uart->tx_message_size = 0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
	uart->tx_transmit = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
	uart_tab[uart_tab_idx] = uart;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <Serial_init+0xa0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <Serial_init+0xa4>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	uart_tab_idx++;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <Serial_init+0xa0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <Serial_init+0xa0>)
 8001570:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0210 	orr.w	r2, r2, #16
 8001580:	60da      	str	r2, [r3, #12]
	__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0208 	bic.w	r2, r2, #8
 8001594:	601a      	str	r2, [r3, #0]
	Serial_receive(uart, RX_BUFFER_SIZE);
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f808 	bl	80015b0 <Serial_receive>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	20000200 	.word	0x20000200

080015b0 <Serial_receive>:

void Serial_receive(UART_BufferTypeDef *uart, uint16_t msg_size) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(uart->huart, uart->rx_buffer, msg_size);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3304      	adds	r3, #4
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	4619      	mov	r1, r3
 80015c8:	f002 fc38 	bl	8003e3c <HAL_UART_Receive_DMA>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Write_RX_buff>:

void Write_RX_buff(UART_BufferTypeDef *uart, uint8_t size) {
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_head;
	for (uint8_t i = 0; i < size; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e022      	b.n	800162c <Write_RX_buff+0x58>
		temp_head = (uart->rx_head + 1) % RX_BUFFER_SIZE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80015ec:	3301      	adds	r3, #1
 80015ee:	425a      	negs	r2, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	bf58      	it	pl
 80015f6:	4253      	negpl	r3, r2
 80015f8:	73bb      	strb	r3, [r7, #14]
		if (temp_head == uart->rx_tail) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001600:	7bba      	ldrb	r2, [r7, #14]
 8001602:	429a      	cmp	r2, r3
 8001604:	d017      	beq.n	8001636 <Write_RX_buff+0x62>
			break;
		} else {
			uart->rx_work_buff[uart->rx_head] = uart->rx_buffer[i];
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	f892 2205 	ldrb.w	r2, [r2, #517]	; 0x205
 800160e:	4611      	mov	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	791a      	ldrb	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	440b      	add	r3, r1
 800161a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			uart->rx_head = temp_head;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7bba      	ldrb	r2, [r7, #14]
 8001622:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
	for (uint8_t i = 0; i < size; i++) {
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3d8      	bcc.n	80015e6 <Write_RX_buff+0x12>
		}
	}
}
 8001634:	e000      	b.n	8001638 <Write_RX_buff+0x64>
			break;
 8001636:	bf00      	nop
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <Serial_read_char>:

uint8_t Serial_read_char(UART_BufferTypeDef *uart) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	uint8_t r = uart->rx_work_buff[uart->rx_tail];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800165c:	73fb      	strb	r3, [r7, #15]
	uart->rx_tail = (uart->rx_tail + 1) % RX_BUFFER_SIZE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001664:	3301      	adds	r3, #1
 8001666:	425a      	negs	r2, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	bf58      	it	pl
 800166e:	4253      	negpl	r3, r2
 8001670:	b2da      	uxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	return r;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <Serial_read_line>:

void Serial_read_line(UART_BufferTypeDef *uart, char* buffer) {
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	uint8_t c;
	while(Serial_available(uart)) {
 8001690:	e011      	b.n	80016b6 <Serial_read_line+0x30>
		c = Serial_read_char(uart);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffd6 	bl	8001644 <Serial_read_char>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
		*buffer = (char)c;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	701a      	strb	r2, [r3, #0]
		buffer++;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
		if((char)c == '\n') {
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d103      	bne.n	80016b6 <Serial_read_line+0x30>
			*buffer = '\0';
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
			break;
 80016b4:	e005      	b.n	80016c2 <Serial_read_line+0x3c>
	while(Serial_available(uart)) {
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f807 	bl	80016ca <Serial_available>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e7      	bne.n	8001692 <Serial_read_line+0xc>
		}
	}
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <Serial_available>:
		buffer++;
	}
}


uint8_t Serial_available(UART_BufferTypeDef *uart) {
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	uint8_t bytes;
	if (uart->rx_head >= uart->rx_tail) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 2205 	ldrb.w	r2, [r3, #517]	; 0x205
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80016de:	429a      	cmp	r2, r3
 80016e0:	d308      	bcc.n	80016f4 <Serial_available+0x2a>
		bytes = uart->rx_head - uart->rx_tail;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 2205 	ldrb.w	r2, [r3, #517]	; 0x205
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	e007      	b.n	8001704 <Serial_available+0x3a>
	} else {
		bytes = RX_BUFFER_SIZE - uart->rx_tail + uart->rx_head;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 2205 	ldrb.w	r2, [r3, #517]	; 0x205
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	73fb      	strb	r3, [r7, #15]
	}
	return bytes;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <Serial_RxCplt>:

void Serial_RxCplt(UART_BufferTypeDef *uart) {
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	uint8_t size = RX_BUFFER_SIZE - uart->huart->hdmarx->Instance->NDTR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	425b      	negs	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]
	Write_RX_buff(uart, size);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff50 	bl	80015d4 <Write_RX_buff>
	Serial_receive(uart, RX_BUFFER_SIZE);
 8001734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff39 	bl	80015b0 <Serial_receive>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	Serial_checkCallback(huart, RX_CHECK);
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f975 	bl	8001a40 <Serial_checkCallback>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <Serial_print>:
void Serial_print(UART_BufferTypeDef *uart, char* message) {
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	uint16_t size = strlen(message);
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7fe fd39 	bl	80001e0 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	81fb      	strh	r3, [r7, #14]
	Serial_send(uart, (uint8_t *)message, size);
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	461a      	mov	r2, r3
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f831 	bl	80017e0 <Serial_send>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <Serial_print_int>:

void Serial_print_int(UART_BufferTypeDef *uart, int integer) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	char message[12];
	int size;
	size = sprintf(message, "%d", integer);
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4908      	ldr	r1, [pc, #32]	; (80017bc <Serial_print_int+0x34>)
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fefc 	bl	8005598 <siprintf>
 80017a0:	6178      	str	r0, [r7, #20]
	Serial_send(uart, (uint8_t *)message, (uint16_t) size);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f817 	bl	80017e0 <Serial_send>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08006dbc 	.word	0x08006dbc

080017c0 <Serial_println>:
	int size;
	size = sprintf(message, "%f", fn);
	Serial_send(uart, (uint8_t *)message, (uint16_t) size);
}

void Serial_println(UART_BufferTypeDef *uart) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	Serial_send(uart, (uint8_t *)"\n\r", 2);
 80017c8:	2202      	movs	r2, #2
 80017ca:	4904      	ldr	r1, [pc, #16]	; (80017dc <Serial_println+0x1c>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f807 	bl	80017e0 <Serial_send>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08006dc4 	.word	0x08006dc4

080017e0 <Serial_send>:

void Serial_send(UART_BufferTypeDef *uart, uint8_t *message, uint16_t size) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_buffer_free;
	if(size > TX_BUFFER_SIZE) {
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	d902      	bls.n	80017fc <Serial_send+0x1c>
		size = TX_BUFFER_SIZE;
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	80fb      	strh	r3, [r7, #6]
	}
	tx_buffer_free = TX_BUFFER_SIZE - uart->tx_head;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8001802:	425b      	negs	r3, r3
 8001804:	75fb      	strb	r3, [r7, #23]
	if (size < tx_buffer_free) {
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	b29b      	uxth	r3, r3
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	429a      	cmp	r2, r3
 800180e:	d247      	bcs.n	80018a0 <Serial_send+0xc0>
		uint16_t head = uart->tx_head;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8001816:	82bb      	strh	r3, [r7, #20]
		memcpy(uart->tx_buffer + uart->tx_head, message, size);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f203 2307 	addw	r3, r3, #519	; 0x207
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	f892 2308 	ldrb.w	r2, [r2, #776]	; 0x308
 8001824:	4413      	add	r3, r2
 8001826:	88fa      	ldrh	r2, [r7, #6]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	4618      	mov	r0, r3
 800182c:	f003 fa44 	bl	8004cb8 <memcpy>
		if (!(uart->tx_transmit)) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 8001836:	2b00      	cmp	r3, #0
 8001838:	d128      	bne.n	800188c <Serial_send+0xac>
			HAL_UART_Transmit_DMA(uart->huart,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6818      	ldr	r0, [r3, #0]
					(uart->tx_buffer + uart->tx_head), size);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f203 2307 	addw	r3, r3, #519	; 0x207
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	f892 2308 	ldrb.w	r2, [r2, #776]	; 0x308
			HAL_UART_Transmit_DMA(uart->huart,
 800184a:	4413      	add	r3, r2
 800184c:	88fa      	ldrh	r2, [r7, #6]
 800184e:	4619      	mov	r1, r3
 8001850:	f002 fa88 	bl	8003d64 <HAL_UART_Transmit_DMA>
			uart->tx_head = head + size;
 8001854:	8abb      	ldrh	r3, [r7, #20]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b2da      	uxtb	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
			uart->tx_message_size += size;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 2315 	ldrb.w	r2, [r3, #789]	; 0x315
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
			(uart->tx_transmit)++;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
		uart->tx_tail = 0;
		uart->tx_head += size;
		uart->tx_message_size += size;
		(uart->tx_transmit)++;
	}
}
 800188a:	e043      	b.n	8001914 <Serial_send+0x134>
			uart->tx_head = head + size;
 800188c:	8abb      	ldrh	r3, [r7, #20]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
}
 800189e:	e039      	b.n	8001914 <Serial_send+0x134>
		while (uart->tx_tail != uart->tx_head) {
 80018a0:	bf00      	nop
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 2307 	ldrb.w	r2, [r3, #775]	; 0x307
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d1f7      	bne.n	80018a2 <Serial_send+0xc2>
		memcpy(uart->tx_buffer, message, size);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 f9fb 	bl	8004cb8 <memcpy>
		HAL_UART_Transmit_DMA(uart->huart, uart->tx_buffer, size);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	4619      	mov	r1, r3
 80018d0:	f002 fa48 	bl	8003d64 <HAL_UART_Transmit_DMA>
		uart->tx_tail = 0;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
		uart->tx_head += size;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 2308 	ldrb.w	r2, [r3, #776]	; 0x308
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
		uart->tx_message_size += size;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 2315 	ldrb.w	r2, [r3, #789]	; 0x315
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
		(uart->tx_transmit)++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 800190a:	3301      	adds	r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	Serial_checkCallback(huart, TX_CHECK);
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f88a 	bl	8001a40 <Serial_checkCallback>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <Serial_TxCplt>:

void Serial_TxCplt(UART_BufferTypeDef *uart) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	uart->tx_tail += uart->tx_message_size;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 2307 	ldrb.w	r2, [r3, #775]	; 0x307
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3315 	ldrb.w	r3, [r3, #789]	; 0x315
 8001948:	4413      	add	r3, r2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
	if (uart->tx_tail != uart->tx_head) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 2307 	ldrb.w	r2, [r3, #775]	; 0x307
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800195e:	429a      	cmp	r2, r3
 8001960:	d029      	beq.n	80019b6 <Serial_TxCplt+0x82>
		HAL_UART_Transmit_DMA(uart->huart, (uart->tx_buffer + uart->tx_tail),
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f203 2307 	addw	r3, r3, #519	; 0x207
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	f892 2307 	ldrb.w	r2, [r2, #775]	; 0x307
 8001972:	1899      	adds	r1, r3, r2
				(uart->tx_head - uart->tx_tail));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3307 	ldrb.w	r3, [r3, #775]	; 0x307
 8001982:	b29b      	uxth	r3, r3
		HAL_UART_Transmit_DMA(uart->huart, (uart->tx_buffer + uart->tx_tail),
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	f002 f9eb 	bl	8003d64 <HAL_UART_Transmit_DMA>
		uart->tx_message_size = uart->tx_head - uart->tx_tail;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 2308 	ldrb.w	r2, [r3, #776]	; 0x308
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3307 	ldrb.w	r3, [r3, #775]	; 0x307
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
		uart->tx_transmit--;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
		uart->tx_message_size = 0;
		uart->tx_transmit = 0;
		uart->tx_tail = 0;
		uart->tx_head = 0;
	}
}
 80019b4:	e00f      	b.n	80019d6 <Serial_TxCplt+0xa2>
		uart->tx_message_size = 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
		uart->tx_transmit = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
		uart->tx_tail = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
		uart->tx_head = 0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <User_UART_IRQHandler>:

void User_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	volatile uint32_t tmp;
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d11e      	bne.n	8001a32 <User_UART_IRQHandler+0x54>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
		tmp = huart->Instance->SR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
		tmp = huart->Instance->DR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
		huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
		tmp = tmp;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	60fb      	str	r3, [r7, #12]
	}
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <Serial_checkCallback>:

void Serial_checkCallback(UART_HandleTypeDef *huart, uint8_t mode) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < UART_PORTS; i++) {
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e022      	b.n	8001a98 <Serial_checkCallback+0x58>
		if (uart_tab[i] == NULL) {
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <Serial_checkCallback+0x6c>)
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d020      	beq.n	8001aa0 <Serial_checkCallback+0x60>
			break;
		}
		else {
			if (huart == uart_tab[i]->huart) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <Serial_checkCallback+0x6c>)
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d111      	bne.n	8001a92 <Serial_checkCallback+0x52>
				if (mode == RX_CHECK) {
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <Serial_checkCallback+0x44>
					Serial_RxCplt(uart_tab[i]);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <Serial_checkCallback+0x6c>)
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe48 	bl	8001712 <Serial_RxCplt>
 8001a82:	e006      	b.n	8001a92 <Serial_checkCallback+0x52>
				} else {
					Serial_TxCplt(uart_tab[i]);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <Serial_checkCallback+0x6c>)
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff51 	bl	8001934 <Serial_TxCplt>
	for (uint8_t i = 0; i < UART_PORTS; i++) {
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d9d9      	bls.n	8001a52 <Serial_checkCallback+0x12>
				}
			}
		}
	}
}
 8001a9e:	e000      	b.n	8001aa2 <Serial_checkCallback+0x62>
			break;
 8001aa0:	bf00      	nop
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000200 	.word	0x20000200

08001ab0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART1_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae8:	f002 f8ef 	bl	8003cca <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f7ff fb99 	bl	8001228 <Error_Handler>
  }

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000dc0 	.word	0x20000dc0
 8001b00:	40011000 	.word	0x40011000

08001b04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <MX_USART2_UART_Init+0x50>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b3c:	f002 f8c5 	bl	8003cca <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b46:	f7ff fb6f 	bl	8001228 <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000e40 	.word	0x20000e40
 8001b54:	40004400 	.word	0x40004400

08001b58 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART6_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b68:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART6_UART_Init+0x4c>)
 8001b90:	f002 f89b 	bl	8003cca <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f7ff fb45 	bl	8001228 <Error_Handler>
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000e00 	.word	0x20000e00
 8001ba8:	40011400 	.word	0x40011400

08001bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a96      	ldr	r2, [pc, #600]	; (8001e24 <HAL_UART_MspInit+0x278>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 8092 	bne.w	8001cf4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	4a93      	ldr	r2, [pc, #588]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	6453      	str	r3, [r2, #68]	; 0x44
 8001be0:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a8c      	ldr	r2, [pc, #560]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4881      	ldr	r0, [pc, #516]	; (8001e2c <HAL_UART_MspInit+0x280>)
 8001c26:	f000 fefb 	bl	8002a20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c2c:	4a81      	ldr	r2, [pc, #516]	; (8001e34 <HAL_UART_MspInit+0x288>)
 8001c2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c30:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4c:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c52:	4b77      	ldr	r3, [pc, #476]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b74      	ldr	r3, [pc, #464]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c6a:	4871      	ldr	r0, [pc, #452]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c6c:	f000 fb48 	bl	8002300 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001c76:	f7ff fad7 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a6c      	ldr	r2, [pc, #432]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c80:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_UART_MspInit+0x284>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c86:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c88:	4a6c      	ldr	r2, [pc, #432]	; (8001e3c <HAL_UART_MspInit+0x290>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca0:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca8:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cc6:	485c      	ldr	r0, [pc, #368]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cc8:	f000 fb1a 	bl	8002300 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001cd2:	f7ff faa9 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
 8001cdc:	4a56      	ldr	r2, [pc, #344]	; (8001e38 <HAL_UART_MspInit+0x28c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2025      	movs	r0, #37	; 0x25
 8001ce8:	f000 fad3 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cec:	2025      	movs	r0, #37	; 0x25
 8001cee:	f000 faec 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001cf2:	e145      	b.n	8001f80 <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==USART2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <HAL_UART_MspInit+0x294>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	f040 80aa 	bne.w	8001e54 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_UART_MspInit+0x27c>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4836      	ldr	r0, [pc, #216]	; (8001e2c <HAL_UART_MspInit+0x280>)
 8001d54:	f000 fe64 	bl	8002a20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_UART_MspInit+0x29c>)
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d98:	482a      	ldr	r0, [pc, #168]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001d9a:	f000 fab1 	bl	8002300 <HAL_DMA_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001da4:	f7ff fa40 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_UART_MspInit+0x298>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001db6:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dc4:	2240      	movs	r2, #64	; 0x40
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001df4:	4815      	ldr	r0, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001df6:	f000 fa83 	bl	8002300 <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001e00:	f7ff fa12 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2026      	movs	r0, #38	; 0x26
 8001e16:	f000 fa3c 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e1a:	2026      	movs	r0, #38	; 0x26
 8001e1c:	f000 fa55 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8001e20:	e0ae      	b.n	8001f80 <HAL_UART_MspInit+0x3d4>
 8001e22:	bf00      	nop
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	20000d00 	.word	0x20000d00
 8001e34:	40026440 	.word	0x40026440
 8001e38:	20000c40 	.word	0x20000c40
 8001e3c:	400264b8 	.word	0x400264b8
 8001e40:	40004400 	.word	0x40004400
 8001e44:	20000b80 	.word	0x20000b80
 8001e48:	40026088 	.word	0x40026088
 8001e4c:	20000d60 	.word	0x20000d60
 8001e50:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART6)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_UART_MspInit+0x3dc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 8090 	bne.w	8001f80 <HAL_UART_MspInit+0x3d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_UART_MspInit+0x3e0>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4837      	ldr	r0, [pc, #220]	; (8001f90 <HAL_UART_MspInit+0x3e4>)
 8001eb4:	f000 fdb4 	bl	8002a20 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001eba:	4a37      	ldr	r2, [pc, #220]	; (8001f98 <HAL_UART_MspInit+0x3ec>)
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ec0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001ef8:	4826      	ldr	r0, [pc, #152]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001efa:	f000 fa01 	bl	8002300 <HAL_DMA_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8001f04:	f7ff f990 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_UART_MspInit+0x3e8>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f16:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_UART_MspInit+0x3f4>)
 8001f18:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f1c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f20:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f34:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f56:	f000 f9d3 	bl	8002300 <HAL_DMA_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_MspInit+0x3b8>
      Error_Handler();
 8001f60:	f7ff f962 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_UART_MspInit+0x3f0>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2047      	movs	r0, #71	; 0x47
 8001f76:	f000 f98c 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f7a:	2047      	movs	r0, #71	; 0x47
 8001f7c:	f000 f9a5 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40011400 	.word	0x40011400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020800 	.word	0x40020800
 8001f94:	20000be0 	.word	0x20000be0
 8001f98:	40026428 	.word	0x40026428
 8001f9c:	20000ca0 	.word	0x20000ca0
 8001fa0:	400264a0 	.word	0x400264a0

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001faa:	e003      	b.n	8001fb4 <LoopCopyDataInit>

08001fac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fb2:	3104      	adds	r1, #4

08001fb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fbc:	d3f6      	bcc.n	8001fac <CopyDataInit>
  ldr  r2, =_sbss
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fc0:	e002      	b.n	8001fc8 <LoopFillZerobss>

08001fc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc4:	f842 3b04 	str.w	r3, [r2], #4

08001fc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fcc:	d3f9      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fce:	f7ff fa85 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f002 fe4d 	bl	8004c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff f835 	bl	8001044 <main>
  bx  lr    
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fe0:	08007058 	.word	0x08007058
  ldr  r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fe8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001fec:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001ff0:	20000e88 	.word	0x20000e88

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_Init+0x40>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_Init+0x40>)
 800200e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x40>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f92b 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff f974 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f943 	bl	80022e6 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002078:	f000 f90b 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000000 	.word	0x20000000
 8002094:	20000008 	.word	0x20000008
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000e80 	.word	0x20000e80

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000e80 	.word	0x20000e80

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff3e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff31 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff feda 	bl	80020c4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e099      	b.n	8002450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233c:	e00f      	b.n	800235e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233e:	f7ff fec1 	bl	80020c4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b05      	cmp	r3, #5
 800234a:	d908      	bls.n	800235e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e078      	b.n	8002450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e8      	bne.n	800233e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_DMA_Init+0x158>)
 8002378:	4013      	ands	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0307 	bic.w	r3, r3, #7
 80023de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d117      	bne.n	8002422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fa91 	bl	800292c <DMA_CheckFifoParam>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800241e:	2301      	movs	r3, #1
 8002420:	e016      	b.n	8002450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa48 	bl	80028c0 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	223f      	movs	r2, #63	; 0x3f
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	f010803f 	.word	0xf010803f

0800245c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_DMA_Start_IT+0x26>
 800247e:	2302      	movs	r3, #2
 8002480:	e040      	b.n	8002504 <HAL_DMA_Start_IT+0xa8>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d12f      	bne.n	80024f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f9da 	bl	8002864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0216 	orr.w	r2, r2, #22
 80024ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0208 	orr.w	r2, r2, #8
 80024e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e005      	b.n	8002502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d004      	beq.n	800252a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00c      	b.n	8002544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800255c:	4b92      	ldr	r3, [pc, #584]	; (80027a8 <HAL_DMA_IRQHandler+0x258>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a92      	ldr	r2, [pc, #584]	; (80027ac <HAL_DMA_IRQHandler+0x25c>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a9b      	lsrs	r3, r3, #10
 8002568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2208      	movs	r2, #8
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2208      	movs	r2, #8
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0202 	orr.w	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2204      	movs	r2, #4
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2210      	movs	r2, #16
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d043      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d03c      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2210      	movs	r2, #16
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d018      	beq.n	8002692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
 800267e:	e01f      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e016      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0208 	bic.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2220      	movs	r2, #32
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 808e 	beq.w	80027ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8086 	beq.w	80027ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2220      	movs	r2, #32
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d136      	bne.n	8002768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0216 	bic.w	r2, r2, #22
 8002708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_DMA_IRQHandler+0x1da>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0208 	bic.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	223f      	movs	r2, #63	; 0x3f
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d07d      	beq.n	800285a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
        }
        return;
 8002766:	e078      	b.n	800285a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	2b00      	cmp	r3, #0
 800278a:	d030      	beq.n	80027ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e02b      	b.n	80027ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d027      	beq.n	80027ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
 80027a6:	e022      	b.n	80027ee <HAL_DMA_IRQHandler+0x29e>
 80027a8:	20000000 	.word	0x20000000
 80027ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0210 	bic.w	r2, r2, #16
 80027cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d032      	beq.n	800285c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d022      	beq.n	8002848 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2205      	movs	r2, #5
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3301      	adds	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	429a      	cmp	r2, r3
 8002824:	d307      	bcc.n	8002836 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f2      	bne.n	800281a <HAL_DMA_IRQHandler+0x2ca>
 8002834:	e000      	b.n	8002838 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002836:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e000      	b.n	800285c <HAL_DMA_IRQHandler+0x30c>
        return;
 800285a:	bf00      	nop
    }
  }
}
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop

08002864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d108      	bne.n	80028a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028a2:	e007      	b.n	80028b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3b10      	subs	r3, #16
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <DMA_CalcBaseAndBitshift+0x64>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <DMA_CalcBaseAndBitshift+0x68>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d909      	bls.n	8002902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	1d1a      	adds	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002900:	e007      	b.n	8002912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	aaaaaaab 	.word	0xaaaaaaab
 8002928:	08006de0 	.word	0x08006de0

0800292c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11f      	bne.n	8002986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d855      	bhi.n	80029f8 <DMA_CheckFifoParam+0xcc>
 800294c:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <DMA_CheckFifoParam+0x28>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002965 	.word	0x08002965
 8002958:	08002977 	.word	0x08002977
 800295c:	08002965 	.word	0x08002965
 8002960:	080029f9 	.word	0x080029f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d045      	beq.n	80029fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e042      	b.n	80029fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800297e:	d13f      	bne.n	8002a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e03c      	b.n	8002a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298e:	d121      	bne.n	80029d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d836      	bhi.n	8002a04 <DMA_CheckFifoParam+0xd8>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <DMA_CheckFifoParam+0x70>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029b3 	.word	0x080029b3
 80029a4:	080029ad 	.word	0x080029ad
 80029a8:	080029c5 	.word	0x080029c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e02f      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c2:	e021      	b.n	8002a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029cc:	d11e      	bne.n	8002a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029d2:	e01b      	b.n	8002a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <DMA_CheckFifoParam+0xb4>
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d003      	beq.n	80029e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029de:	e018      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e015      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00e      	beq.n	8002a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      break;
 80029f6:	e00b      	b.n	8002a10 <DMA_CheckFifoParam+0xe4>
      break;
 80029f8:	bf00      	nop
 80029fa:	e00a      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 80029fc:	bf00      	nop
 80029fe:	e008      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 8002a00:	bf00      	nop
 8002a02:	e006      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 8002a04:	bf00      	nop
 8002a06:	e004      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <DMA_CheckFifoParam+0xe6>
      break;
 8002a10:	bf00      	nop
    }
  } 
  
  return status; 
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e159      	b.n	8002cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8148 	bne.w	8002cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d00b      	beq.n	8002a7a <HAL_GPIO_Init+0x5a>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a6e:	2b11      	cmp	r3, #17
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b12      	cmp	r3, #18
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0xfc>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a2 	beq.w	8002cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x202>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a47      	ldr	r2, [pc, #284]	; (8002d10 <HAL_GPIO_Init+0x2f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x1fe>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a46      	ldr	r2, [pc, #280]	; (8002d14 <HAL_GPIO_Init+0x2f4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a45      	ldr	r2, [pc, #276]	; (8002d18 <HAL_GPIO_Init+0x2f8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x1f6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a44      	ldr	r2, [pc, #272]	; (8002d1c <HAL_GPIO_Init+0x2fc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x1f2>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c66:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f aea2 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3724      	adds	r7, #36	; 0x24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e25b      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d075      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d76:	4ba3      	ldr	r3, [pc, #652]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4ba0      	ldr	r3, [pc, #640]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d112      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4b9d      	ldr	r3, [pc, #628]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d157      	bne.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e236      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x74>
 8002dbe:	4b91      	ldr	r3, [pc, #580]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a90      	ldr	r2, [pc, #576]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b8b      	ldr	r3, [pc, #556]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a8a      	ldr	r2, [pc, #552]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a87      	ldr	r2, [pc, #540]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002df0:	4b84      	ldr	r3, [pc, #528]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a83      	ldr	r2, [pc, #524]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a80      	ldr	r2, [pc, #512]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff f958 	bl	80020c4 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff f954 	bl	80020c4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1fb      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff f944 	bl	80020c4 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff f940 	bl	80020c4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1e7      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6e:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1bb      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b56      	ldr	r3, [pc, #344]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4952      	ldr	r1, [pc, #328]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	; (8003008 <HAL_RCC_OscConfig+0x2b0>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7ff f8f9 	bl	80020c4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7ff f8f5 	bl	80020c4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e19c      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b43      	ldr	r3, [pc, #268]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4940      	ldr	r1, [pc, #256]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_OscConfig+0x2b0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff f8d8 	bl	80020c4 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f18:	f7ff f8d4 	bl	80020c4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e17b      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d030      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x2b4>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7ff f8b8 	bl	80020c4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff f8b4 	bl	80020c4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e15b      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x200>
 8002f76:	e015      	b.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x2b4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff f8a1 	bl	80020c4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f86:	f7ff f89d 	bl	80020c4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e144      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a0 	beq.w	80030f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x2b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_RCC_OscConfig+0x2b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <HAL_RCC_OscConfig+0x2b8>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f863 	bl	80020c4 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	e011      	b.n	8003026 <HAL_RCC_OscConfig+0x2ce>
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	42470000 	.word	0x42470000
 800300c:	42470e80 	.word	0x42470e80
 8003010:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7ff f856 	bl	80020c4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0fd      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x4d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x2f0>
 800303a:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a7c      	ldr	r2, [pc, #496]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x32a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x312>
 8003050:	4b77      	ldr	r3, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a76      	ldr	r2, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	4b74      	ldr	r3, [pc, #464]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a73      	ldr	r2, [pc, #460]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x32a>
 800306a:	4b71      	ldr	r3, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a70      	ldr	r2, [pc, #448]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a6d      	ldr	r2, [pc, #436]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7ff f81b 	bl	80020c4 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7ff f817 	bl	80020c4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0bc      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCC_OscConfig+0x33a>
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7ff f805 	bl	80020c4 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7ff f801 	bl	80020c4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0a6      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4b56      	ldr	r3, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a51      	ldr	r2, [pc, #324]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8092 	beq.w	8003220 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d05c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d141      	bne.n	8003194 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_RCC_OscConfig+0x4dc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe ffd5 	bl	80020c4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe ffd1 	bl	80020c4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e078      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	3b01      	subs	r3, #1
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	4933      	ldr	r1, [pc, #204]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x4dc>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe ffaa 	bl	80020c4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe ffa6 	bl	80020c4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04d      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x41c>
 8003192:	e045      	b.n	8003220 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x4dc>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe ff93 	bl	80020c4 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fe ff8f 	bl	80020c4 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e036      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x44a>
 80031c0:	e02e      	b.n	8003220 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e029      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_RCC_OscConfig+0x4d8>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d115      	bne.n	800321c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10d      	bne.n	800321c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000
 8003230:	40023800 	.word	0x40023800
 8003234:	42470060 	.word	0x42470060

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0cc      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b68      	ldr	r3, [pc, #416]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d90c      	bls.n	8003274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0b8      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800328c:	4b59      	ldr	r3, [pc, #356]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	494d      	ldr	r1, [pc, #308]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d044      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d119      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e067      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4934      	ldr	r1, [pc, #208]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7fe fecc 	bl	80020c4 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fe fec8 	bl	80020c4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d20c      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e032      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4916      	ldr	r1, [pc, #88]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	490e      	ldr	r1, [pc, #56]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033be:	f000 f821 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	fa21 f303 	lsr.w	r3, r1, r3
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fe2c 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08006dc8 	.word	0x08006dc8
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000004 	.word	0x20000004

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b04      	cmp	r3, #4
 8003424:	d007      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x32>
 8003426:	2b08      	cmp	r3, #8
 8003428:	d008      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x38>
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80b4 	bne.w	8003598 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003432:	60bb      	str	r3, [r7, #8]
       break;
 8003434:	e0b3      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003436:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003438:	60bb      	str	r3, [r7, #8]
      break;
 800343a:	e0b0      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800343c:	4b5a      	ldr	r3, [pc, #360]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003444:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003446:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d04a      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003452:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	ea03 0501 	and.w	r5, r3, r1
 8003468:	ea04 0602 	and.w	r6, r4, r2
 800346c:	4629      	mov	r1, r5
 800346e:	4632      	mov	r2, r6
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0154      	lsls	r4, r2, #5
 800347a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800347e:	014b      	lsls	r3, r1, #5
 8003480:	4619      	mov	r1, r3
 8003482:	4622      	mov	r2, r4
 8003484:	1b49      	subs	r1, r1, r5
 8003486:	eb62 0206 	sbc.w	r2, r2, r6
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	f04f 0400 	mov.w	r4, #0
 8003492:	0194      	lsls	r4, r2, #6
 8003494:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003498:	018b      	lsls	r3, r1, #6
 800349a:	1a5b      	subs	r3, r3, r1
 800349c:	eb64 0402 	sbc.w	r4, r4, r2
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	00e2      	lsls	r2, r4, #3
 80034aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034ae:	00d9      	lsls	r1, r3, #3
 80034b0:	460b      	mov	r3, r1
 80034b2:	4614      	mov	r4, r2
 80034b4:	195b      	adds	r3, r3, r5
 80034b6:	eb44 0406 	adc.w	r4, r4, r6
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	0262      	lsls	r2, r4, #9
 80034c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034c8:	0259      	lsls	r1, r3, #9
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	4621      	mov	r1, r4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	461a      	mov	r2, r3
 80034da:	4623      	mov	r3, r4
 80034dc:	f7fd fb6c 	bl	8000bb8 <__aeabi_uldivmod>
 80034e0:	4603      	mov	r3, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e049      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	f04f 0400 	mov.w	r4, #0
 80034f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	ea03 0501 	and.w	r5, r3, r1
 80034fe:	ea04 0602 	and.w	r6, r4, r2
 8003502:	4629      	mov	r1, r5
 8003504:	4632      	mov	r2, r6
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	0154      	lsls	r4, r2, #5
 8003510:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003514:	014b      	lsls	r3, r1, #5
 8003516:	4619      	mov	r1, r3
 8003518:	4622      	mov	r2, r4
 800351a:	1b49      	subs	r1, r1, r5
 800351c:	eb62 0206 	sbc.w	r2, r2, r6
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f04f 0400 	mov.w	r4, #0
 8003528:	0194      	lsls	r4, r2, #6
 800352a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	1a5b      	subs	r3, r3, r1
 8003532:	eb64 0402 	sbc.w	r4, r4, r2
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003544:	00d9      	lsls	r1, r3, #3
 8003546:	460b      	mov	r3, r1
 8003548:	4614      	mov	r4, r2
 800354a:	195b      	adds	r3, r3, r5
 800354c:	eb44 0406 	adc.w	r4, r4, r6
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	02a2      	lsls	r2, r4, #10
 800355a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800355e:	0299      	lsls	r1, r3, #10
 8003560:	460b      	mov	r3, r1
 8003562:	4614      	mov	r4, r2
 8003564:	4618      	mov	r0, r3
 8003566:	4621      	mov	r1, r4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f04f 0400 	mov.w	r4, #0
 800356e:	461a      	mov	r2, r3
 8003570:	4623      	mov	r3, r4
 8003572:	f7fd fb21 	bl	8000bb8 <__aeabi_uldivmod>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	60bb      	str	r3, [r7, #8]
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800359a:	60bb      	str	r3, [r7, #8]
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	68bb      	ldr	r3, [r7, #8]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4601      	mov	r1, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4a03      	ldr	r2, [pc, #12]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	08006dd8 	.word	0x08006dd8

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035f8:	f7ff ffdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035fc:	4601      	mov	r1, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0b5b      	lsrs	r3, r3, #13
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4a03      	ldr	r2, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	08006dd8 	.word	0x08006dd8

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d038      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003644:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800364a:	f7fe fd3b 	bl	80020c4 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003652:	f7fe fd37 	bl	80020c4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0bd      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	071b      	lsls	r3, r3, #28
 8003682:	495a      	ldr	r1, [pc, #360]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800368a:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe fd18 	bl	80020c4 <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003698:	f7fe fd14 	bl	80020c4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e09a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8083 	beq.w	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4a47      	ldr	r2, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6413      	str	r3, [r2, #64]	; 0x40
 80036d4:	4b45      	ldr	r3, [pc, #276]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036e0:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a42      	ldr	r2, [pc, #264]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fcea 	bl	80020c4 <HAL_GetTick>
 80036f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036f4:	f7fe fce6 	bl	80020c4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e06c      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003706:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02f      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d028      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800373a:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003746:	4a29      	ldr	r2, [pc, #164]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d114      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fcb4 	bl	80020c4 <HAL_GetTick>
 800375c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fcb0 	bl	80020c4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e034      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	4911      	ldr	r1, [pc, #68]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
 80037aa:	e005      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037b6:	6093      	str	r3, [r2, #8]
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	4909      	ldr	r1, [pc, #36]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7d1a      	ldrb	r2, [r3, #20]
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80037dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	42470068 	.word	0x42470068
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40007000 	.word	0x40007000
 80037f4:	42470e40 	.word	0x42470e40
 80037f8:	424711e0 	.word	0x424711e0

080037fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e083      	b.n	8003916 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7f5b      	ldrb	r3, [r3, #29]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fd64 	bl	80012ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	22ca      	movs	r2, #202	; 0xca
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2253      	movs	r2, #83	; 0x53
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9fb 	bl	8003c36 <RTC_EnterInitMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2204      	movs	r2, #4
 8003852:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e05e      	b.n	8003916 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6919      	ldr	r1, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	041a      	lsls	r2, r3, #16
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10e      	bne.n	80038e4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f98d 	bl	8003be6 <HAL_RTC_WaitForSynchro>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2204      	movs	r2, #4
 80038de:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e018      	b.n	8003916 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800391e:	b590      	push	{r4, r7, lr}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	7f1b      	ldrb	r3, [r3, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_RTC_SetTime+0x1c>
 8003936:	2302      	movs	r3, #2
 8003938:	e0aa      	b.n	8003a90 <HAL_RTC_SetTime+0x172>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d126      	bne.n	800399a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2200      	movs	r2, #0
 800395e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f992 	bl	8003c8e <RTC_ByteToBcd2>
 800396a:	4603      	mov	r3, r0
 800396c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f98b 	bl	8003c8e <RTC_ByteToBcd2>
 8003978:	4603      	mov	r3, r0
 800397a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800397c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	789b      	ldrb	r3, [r3, #2]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f983 	bl	8003c8e <RTC_ByteToBcd2>
 8003988:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800398a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	78db      	ldrb	r3, [r3, #3]
 8003992:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e018      	b.n	80039cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039ba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	22ca      	movs	r2, #202	; 0xca
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2253      	movs	r2, #83	; 0x53
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f92a 	bl	8003c36 <RTC_EnterInitMode>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2204      	movs	r2, #4
 80039f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e047      	b.n	8003a90 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d111      	bne.n	8003a7a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f8c5 	bl	8003be6 <HAL_RTC_WaitForSynchro>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00a      	b.n	8003a90 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}

08003a98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	7f1b      	ldrb	r3, [r3, #28]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_RTC_SetDate+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e094      	b.n	8003bde <HAL_RTC_SetDate+0x146>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_RTC_SetDate+0x4c>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	330a      	adds	r3, #10
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	78db      	ldrb	r3, [r3, #3]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f8cd 	bl	8003c8e <RTC_ByteToBcd2>
 8003af4:	4603      	mov	r3, r0
 8003af6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f8c6 	bl	8003c8e <RTC_ByteToBcd2>
 8003b02:	4603      	mov	r3, r0
 8003b04:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b06:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	789b      	ldrb	r3, [r3, #2]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f8be 	bl	8003c8e <RTC_ByteToBcd2>
 8003b12:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003b14:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e00e      	b.n	8003b42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	78db      	ldrb	r3, [r3, #3]
 8003b28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b30:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	22ca      	movs	r2, #202	; 0xca
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2253      	movs	r2, #83	; 0x53
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f86f 	bl	8003c36 <RTC_EnterInitMode>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e033      	b.n	8003bde <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81e 	bl	8003be6 <HAL_RTC_WaitForSynchro>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e00a      	b.n	8003bde <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	22ff      	movs	r2, #255	; 0xff
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd90      	pop	{r4, r7, pc}

08003be6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c02:	f7fe fa5f 	bl	80020c4 <HAL_GetTick>
 8003c06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c08:	e009      	b.n	8003c1e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c0a:	f7fe fa5b 	bl	80020c4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	d901      	bls.n	8003c1e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e007      	b.n	8003c2e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d119      	bne.n	8003c84 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe fa33 	bl	80020c4 <HAL_GetTick>
 8003c5e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c60:	e009      	b.n	8003c76 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c62:	f7fe fa2f 	bl	80020c4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c70:	d901      	bls.n	8003c76 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e007      	b.n	8003c86 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ee      	beq.n	8003c62 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003c9c:	e005      	b.n	8003caa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	3b0a      	subs	r3, #10
 8003ca8:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d8f6      	bhi.n	8003c9e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e03f      	b.n	8003d5c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fd ff5b 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2224      	movs	r2, #36	; 0x24
 8003cfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fc2c 	bl	800456c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d153      	bne.n	8003e26 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit_DMA+0x26>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e04c      	b.n	8003e28 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Transmit_DMA+0x38>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e045      	b.n	8003e28 <HAL_UART_Transmit_DMA+0xc4>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	; 0x21
 8003dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_UART_Transmit_DMA+0xcc>)
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_UART_Transmit_DMA+0xd0>)
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <HAL_UART_Transmit_DMA+0xd4>)
 8003dda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2200      	movs	r2, #0
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3304      	adds	r3, #4
 8003df8:	461a      	mov	r2, r3
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	f7fe fb2e 	bl	800245c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08004179 	.word	0x08004179
 8003e34:	080041cb 	.word	0x080041cb
 8003e38:	0800426b 	.word	0x0800426b

08003e3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d166      	bne.n	8003f24 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Receive_DMA+0x26>
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e05f      	b.n	8003f26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Receive_DMA+0x38>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e058      	b.n	8003f26 <HAL_UART_Receive_DMA+0xea>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2222      	movs	r2, #34	; 0x22
 8003e92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <HAL_UART_Receive_DMA+0xf4>)
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	4a24      	ldr	r2, [pc, #144]	; (8003f34 <HAL_UART_Receive_DMA+0xf8>)
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <HAL_UART_Receive_DMA+0xfc>)
 8003eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	f7fe fac5 	bl	800245c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	080041e7 	.word	0x080041e7
 8003f34:	0800424f 	.word	0x0800424f
 8003f38:	0800426b 	.word	0x0800426b

08003f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_UART_IRQHandler+0x52>
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa6f 	bl	800446a <UART_Receive_IT>
      return;
 8003f8c:	e0d1      	b.n	8004132 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b0 	beq.w	80040f6 <HAL_UART_IRQHandler+0x1ba>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_IRQHandler+0x70>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a5 	beq.w	80040f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_UART_IRQHandler+0x90>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_UART_IRQHandler+0xb0>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	f043 0202 	orr.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_UART_IRQHandler+0xd0>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00f      	beq.n	8004036 <HAL_UART_IRQHandler+0xfa>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_UART_IRQHandler+0xee>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	f043 0208 	orr.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d078      	beq.n	8004130 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_UART_IRQHandler+0x11c>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa09 	bl	800446a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_UART_IRQHandler+0x144>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d031      	beq.n	80040e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f952 	bl	800432a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d123      	bne.n	80040dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <HAL_UART_IRQHandler+0x1fc>)
 80040b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fa27 	bl	800250c <HAL_DMA_Abort_IT>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d016      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ce:	4610      	mov	r0, r2
 80040d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d2:	e00e      	b.n	80040f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f845 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040da:	e00a      	b.n	80040f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f841 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e2:	e006      	b.n	80040f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f83d 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040f0:	e01e      	b.n	8004130 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f2:	bf00      	nop
    return;
 80040f4:	e01c      	b.n	8004130 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_UART_IRQHandler+0x1d6>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f93f 	bl	800438e <UART_Transmit_IT>
    return;
 8004110:	e00f      	b.n	8004132 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_UART_IRQHandler+0x1f6>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f987 	bl	800443a <UART_EndTransmit_IT>
    return;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004130:	bf00      	nop
  }
}
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	08004367 	.word	0x08004367

0800413c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d113      	bne.n	80041bc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ba:	e002      	b.n	80041c2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7fd fbad 	bl	800191c <HAL_UART_TxCpltCallback>
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ffaf 	bl	800413c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11e      	bne.n	8004240 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004236:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7fd fa80 	bl	8001746 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff ff77 	bl	8004150 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b21      	cmp	r3, #33	; 0x21
 800429c:	d108      	bne.n	80042b0 <UART_DMAError+0x46>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042aa:	68b8      	ldr	r0, [r7, #8]
 80042ac:	f000 f827 	bl	80042fe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	d108      	bne.n	80042e4 <UART_DMAError+0x7a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042de:	68b8      	ldr	r0, [r7, #8]
 80042e0:	f000 f823 	bl	800432a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f7ff ff37 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004314:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004340:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff feef 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b21      	cmp	r3, #33	; 0x21
 80043a0:	d144      	bne.n	800442c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043aa:	d11a      	bne.n	80043e2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	621a      	str	r2, [r3, #32]
 80043d4:	e00e      	b.n	80043f4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]
 80043e0:	e008      	b.n	80043f4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	1c59      	adds	r1, r3, #1
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6211      	str	r1, [r2, #32]
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4619      	mov	r1, r3
 8004402:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004416:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004450:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fa5e 	bl	800191c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d171      	bne.n	8004562 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d123      	bne.n	80044d0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10e      	bne.n	80044b4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
 80044b2:	e029      	b.n	8004508 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
 80044ce:	e01b      	b.n	8004508 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6858      	ldr	r0, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6291      	str	r1, [r2, #40]	; 0x28
 80044e8:	b2c2      	uxtb	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e00c      	b.n	8004508 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	1c58      	adds	r0, r3, #1
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	6288      	str	r0, [r1, #40]	; 0x28
 8004500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29b      	uxth	r3, r3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4619      	mov	r1, r3
 8004516:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004518:	2b00      	cmp	r3, #0
 800451a:	d120      	bne.n	800455e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0220 	bic.w	r2, r2, #32
 800452a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800453a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fd f8f6 	bl	8001746 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e002      	b.n	8004564 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045ae:	f023 030c 	bic.w	r3, r3, #12
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045da:	f040 818b 	bne.w	80048f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4ac1      	ldr	r2, [pc, #772]	; (80048e8 <UART_SetConfig+0x37c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d005      	beq.n	80045f4 <UART_SetConfig+0x88>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4abf      	ldr	r2, [pc, #764]	; (80048ec <UART_SetConfig+0x380>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f040 80bd 	bne.w	800476e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fe fffe 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 80045f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	461d      	mov	r5, r3
 80045fe:	f04f 0600 	mov.w	r6, #0
 8004602:	46a8      	mov	r8, r5
 8004604:	46b1      	mov	r9, r6
 8004606:	eb18 0308 	adds.w	r3, r8, r8
 800460a:	eb49 0409 	adc.w	r4, r9, r9
 800460e:	4698      	mov	r8, r3
 8004610:	46a1      	mov	r9, r4
 8004612:	eb18 0805 	adds.w	r8, r8, r5
 8004616:	eb49 0906 	adc.w	r9, r9, r6
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004626:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800462a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800462e:	4688      	mov	r8, r1
 8004630:	4691      	mov	r9, r2
 8004632:	eb18 0005 	adds.w	r0, r8, r5
 8004636:	eb49 0106 	adc.w	r1, r9, r6
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	461d      	mov	r5, r3
 8004640:	f04f 0600 	mov.w	r6, #0
 8004644:	196b      	adds	r3, r5, r5
 8004646:	eb46 0406 	adc.w	r4, r6, r6
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	f7fc fab3 	bl	8000bb8 <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	461a      	mov	r2, r3
 8004658:	4ba5      	ldr	r3, [pc, #660]	; (80048f0 <UART_SetConfig+0x384>)
 800465a:	fba3 2302 	umull	r2, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	461d      	mov	r5, r3
 8004668:	f04f 0600 	mov.w	r6, #0
 800466c:	46a9      	mov	r9, r5
 800466e:	46b2      	mov	sl, r6
 8004670:	eb19 0309 	adds.w	r3, r9, r9
 8004674:	eb4a 040a 	adc.w	r4, sl, sl
 8004678:	4699      	mov	r9, r3
 800467a:	46a2      	mov	sl, r4
 800467c:	eb19 0905 	adds.w	r9, r9, r5
 8004680:	eb4a 0a06 	adc.w	sl, sl, r6
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004698:	4689      	mov	r9, r1
 800469a:	4692      	mov	sl, r2
 800469c:	eb19 0005 	adds.w	r0, r9, r5
 80046a0:	eb4a 0106 	adc.w	r1, sl, r6
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	461d      	mov	r5, r3
 80046aa:	f04f 0600 	mov.w	r6, #0
 80046ae:	196b      	adds	r3, r5, r5
 80046b0:	eb46 0406 	adc.w	r4, r6, r6
 80046b4:	461a      	mov	r2, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	f7fc fa7e 	bl	8000bb8 <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b8b      	ldr	r3, [pc, #556]	; (80048f0 <UART_SetConfig+0x384>)
 80046c4:	fba3 1302 	umull	r1, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2164      	movs	r1, #100	; 0x64
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3332      	adds	r3, #50	; 0x32
 80046d6:	4a86      	ldr	r2, [pc, #536]	; (80048f0 <UART_SetConfig+0x384>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e4:	4498      	add	r8, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	461d      	mov	r5, r3
 80046ea:	f04f 0600 	mov.w	r6, #0
 80046ee:	46a9      	mov	r9, r5
 80046f0:	46b2      	mov	sl, r6
 80046f2:	eb19 0309 	adds.w	r3, r9, r9
 80046f6:	eb4a 040a 	adc.w	r4, sl, sl
 80046fa:	4699      	mov	r9, r3
 80046fc:	46a2      	mov	sl, r4
 80046fe:	eb19 0905 	adds.w	r9, r9, r5
 8004702:	eb4a 0a06 	adc.w	sl, sl, r6
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800471a:	4689      	mov	r9, r1
 800471c:	4692      	mov	sl, r2
 800471e:	eb19 0005 	adds.w	r0, r9, r5
 8004722:	eb4a 0106 	adc.w	r1, sl, r6
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	461d      	mov	r5, r3
 800472c:	f04f 0600 	mov.w	r6, #0
 8004730:	196b      	adds	r3, r5, r5
 8004732:	eb46 0406 	adc.w	r4, r6, r6
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	f7fc fa3d 	bl	8000bb8 <__aeabi_uldivmod>
 800473e:	4603      	mov	r3, r0
 8004740:	460c      	mov	r4, r1
 8004742:	461a      	mov	r2, r3
 8004744:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <UART_SetConfig+0x384>)
 8004746:	fba3 1302 	umull	r1, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2164      	movs	r1, #100	; 0x64
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	3332      	adds	r3, #50	; 0x32
 8004758:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <UART_SetConfig+0x384>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	f003 0207 	and.w	r2, r3, #7
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4442      	add	r2, r8
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	e26f      	b.n	8004c4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800476e:	f7fe ff2d 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004772:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	461d      	mov	r5, r3
 8004778:	f04f 0600 	mov.w	r6, #0
 800477c:	46a8      	mov	r8, r5
 800477e:	46b1      	mov	r9, r6
 8004780:	eb18 0308 	adds.w	r3, r8, r8
 8004784:	eb49 0409 	adc.w	r4, r9, r9
 8004788:	4698      	mov	r8, r3
 800478a:	46a1      	mov	r9, r4
 800478c:	eb18 0805 	adds.w	r8, r8, r5
 8004790:	eb49 0906 	adc.w	r9, r9, r6
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047a8:	4688      	mov	r8, r1
 80047aa:	4691      	mov	r9, r2
 80047ac:	eb18 0005 	adds.w	r0, r8, r5
 80047b0:	eb49 0106 	adc.w	r1, r9, r6
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	461d      	mov	r5, r3
 80047ba:	f04f 0600 	mov.w	r6, #0
 80047be:	196b      	adds	r3, r5, r5
 80047c0:	eb46 0406 	adc.w	r4, r6, r6
 80047c4:	461a      	mov	r2, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	f7fc f9f6 	bl	8000bb8 <__aeabi_uldivmod>
 80047cc:	4603      	mov	r3, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <UART_SetConfig+0x384>)
 80047d4:	fba3 2302 	umull	r2, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	461d      	mov	r5, r3
 80047e2:	f04f 0600 	mov.w	r6, #0
 80047e6:	46a9      	mov	r9, r5
 80047e8:	46b2      	mov	sl, r6
 80047ea:	eb19 0309 	adds.w	r3, r9, r9
 80047ee:	eb4a 040a 	adc.w	r4, sl, sl
 80047f2:	4699      	mov	r9, r3
 80047f4:	46a2      	mov	sl, r4
 80047f6:	eb19 0905 	adds.w	r9, r9, r5
 80047fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800480a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800480e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004812:	4689      	mov	r9, r1
 8004814:	4692      	mov	sl, r2
 8004816:	eb19 0005 	adds.w	r0, r9, r5
 800481a:	eb4a 0106 	adc.w	r1, sl, r6
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	461d      	mov	r5, r3
 8004824:	f04f 0600 	mov.w	r6, #0
 8004828:	196b      	adds	r3, r5, r5
 800482a:	eb46 0406 	adc.w	r4, r6, r6
 800482e:	461a      	mov	r2, r3
 8004830:	4623      	mov	r3, r4
 8004832:	f7fc f9c1 	bl	8000bb8 <__aeabi_uldivmod>
 8004836:	4603      	mov	r3, r0
 8004838:	460c      	mov	r4, r1
 800483a:	461a      	mov	r2, r3
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <UART_SetConfig+0x384>)
 800483e:	fba3 1302 	umull	r1, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2164      	movs	r1, #100	; 0x64
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <UART_SetConfig+0x384>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800485e:	4498      	add	r8, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	461d      	mov	r5, r3
 8004864:	f04f 0600 	mov.w	r6, #0
 8004868:	46a9      	mov	r9, r5
 800486a:	46b2      	mov	sl, r6
 800486c:	eb19 0309 	adds.w	r3, r9, r9
 8004870:	eb4a 040a 	adc.w	r4, sl, sl
 8004874:	4699      	mov	r9, r3
 8004876:	46a2      	mov	sl, r4
 8004878:	eb19 0905 	adds.w	r9, r9, r5
 800487c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800488c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004894:	4689      	mov	r9, r1
 8004896:	4692      	mov	sl, r2
 8004898:	eb19 0005 	adds.w	r0, r9, r5
 800489c:	eb4a 0106 	adc.w	r1, sl, r6
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	461d      	mov	r5, r3
 80048a6:	f04f 0600 	mov.w	r6, #0
 80048aa:	196b      	adds	r3, r5, r5
 80048ac:	eb46 0406 	adc.w	r4, r6, r6
 80048b0:	461a      	mov	r2, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	f7fc f980 	bl	8000bb8 <__aeabi_uldivmod>
 80048b8:	4603      	mov	r3, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	461a      	mov	r2, r3
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <UART_SetConfig+0x384>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <UART_SetConfig+0x384>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 0207 	and.w	r2, r3, #7
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4442      	add	r2, r8
 80048e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048e6:	e1b2      	b.n	8004c4e <UART_SetConfig+0x6e2>
 80048e8:	40011000 	.word	0x40011000
 80048ec:	40011400 	.word	0x40011400
 80048f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4ad7      	ldr	r2, [pc, #860]	; (8004c58 <UART_SetConfig+0x6ec>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d005      	beq.n	800490a <UART_SetConfig+0x39e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4ad6      	ldr	r2, [pc, #856]	; (8004c5c <UART_SetConfig+0x6f0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	f040 80d1 	bne.w	8004aac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800490a:	f7fe fe73 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 800490e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	469a      	mov	sl, r3
 8004914:	f04f 0b00 	mov.w	fp, #0
 8004918:	46d0      	mov	r8, sl
 800491a:	46d9      	mov	r9, fp
 800491c:	eb18 0308 	adds.w	r3, r8, r8
 8004920:	eb49 0409 	adc.w	r4, r9, r9
 8004924:	4698      	mov	r8, r3
 8004926:	46a1      	mov	r9, r4
 8004928:	eb18 080a 	adds.w	r8, r8, sl
 800492c:	eb49 090b 	adc.w	r9, r9, fp
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800493c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004940:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004944:	4688      	mov	r8, r1
 8004946:	4691      	mov	r9, r2
 8004948:	eb1a 0508 	adds.w	r5, sl, r8
 800494c:	eb4b 0609 	adc.w	r6, fp, r9
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	0094      	lsls	r4, r2, #2
 8004964:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	461a      	mov	r2, r3
 800496c:	4623      	mov	r3, r4
 800496e:	4628      	mov	r0, r5
 8004970:	4631      	mov	r1, r6
 8004972:	f7fc f921 	bl	8000bb8 <__aeabi_uldivmod>
 8004976:	4603      	mov	r3, r0
 8004978:	460c      	mov	r4, r1
 800497a:	461a      	mov	r2, r3
 800497c:	4bb8      	ldr	r3, [pc, #736]	; (8004c60 <UART_SetConfig+0x6f4>)
 800497e:	fba3 2302 	umull	r2, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	469b      	mov	fp, r3
 800498c:	f04f 0c00 	mov.w	ip, #0
 8004990:	46d9      	mov	r9, fp
 8004992:	46e2      	mov	sl, ip
 8004994:	eb19 0309 	adds.w	r3, r9, r9
 8004998:	eb4a 040a 	adc.w	r4, sl, sl
 800499c:	4699      	mov	r9, r3
 800499e:	46a2      	mov	sl, r4
 80049a0:	eb19 090b 	adds.w	r9, r9, fp
 80049a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049a8:	f04f 0100 	mov.w	r1, #0
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049bc:	4689      	mov	r9, r1
 80049be:	4692      	mov	sl, r2
 80049c0:	eb1b 0509 	adds.w	r5, fp, r9
 80049c4:	eb4c 060a 	adc.w	r6, ip, sl
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	0094      	lsls	r4, r2, #2
 80049dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049e0:	008b      	lsls	r3, r1, #2
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	4628      	mov	r0, r5
 80049e8:	4631      	mov	r1, r6
 80049ea:	f7fc f8e5 	bl	8000bb8 <__aeabi_uldivmod>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b9a      	ldr	r3, [pc, #616]	; (8004c60 <UART_SetConfig+0x6f4>)
 80049f6:	fba3 1302 	umull	r1, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2164      	movs	r1, #100	; 0x64
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	3332      	adds	r3, #50	; 0x32
 8004a08:	4a95      	ldr	r2, [pc, #596]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a14:	4498      	add	r8, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	469b      	mov	fp, r3
 8004a1a:	f04f 0c00 	mov.w	ip, #0
 8004a1e:	46d9      	mov	r9, fp
 8004a20:	46e2      	mov	sl, ip
 8004a22:	eb19 0309 	adds.w	r3, r9, r9
 8004a26:	eb4a 040a 	adc.w	r4, sl, sl
 8004a2a:	4699      	mov	r9, r3
 8004a2c:	46a2      	mov	sl, r4
 8004a2e:	eb19 090b 	adds.w	r9, r9, fp
 8004a32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a4a:	4689      	mov	r9, r1
 8004a4c:	4692      	mov	sl, r2
 8004a4e:	eb1b 0509 	adds.w	r5, fp, r9
 8004a52:	eb4c 060a 	adc.w	r6, ip, sl
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	f04f 0400 	mov.w	r4, #0
 8004a68:	0094      	lsls	r4, r2, #2
 8004a6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a6e:	008b      	lsls	r3, r1, #2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	4628      	mov	r0, r5
 8004a76:	4631      	mov	r1, r6
 8004a78:	f7fc f89e 	bl	8000bb8 <__aeabi_uldivmod>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b77      	ldr	r3, [pc, #476]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004a84:	fba3 1302 	umull	r1, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	2164      	movs	r1, #100	; 0x64
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	3332      	adds	r3, #50	; 0x32
 8004a96:	4a72      	ldr	r2, [pc, #456]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	f003 020f 	and.w	r2, r3, #15
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4442      	add	r2, r8
 8004aa8:	609a      	str	r2, [r3, #8]
 8004aaa:	e0d0      	b.n	8004c4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7fe fd8e 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004ab0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	469a      	mov	sl, r3
 8004ab6:	f04f 0b00 	mov.w	fp, #0
 8004aba:	46d0      	mov	r8, sl
 8004abc:	46d9      	mov	r9, fp
 8004abe:	eb18 0308 	adds.w	r3, r8, r8
 8004ac2:	eb49 0409 	adc.w	r4, r9, r9
 8004ac6:	4698      	mov	r8, r3
 8004ac8:	46a1      	mov	r9, r4
 8004aca:	eb18 080a 	adds.w	r8, r8, sl
 8004ace:	eb49 090b 	adc.w	r9, r9, fp
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ade:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ae2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ae6:	4688      	mov	r8, r1
 8004ae8:	4691      	mov	r9, r2
 8004aea:	eb1a 0508 	adds.w	r5, sl, r8
 8004aee:	eb4b 0609 	adc.w	r6, fp, r9
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4619      	mov	r1, r3
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	0094      	lsls	r4, r2, #2
 8004b06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b0a:	008b      	lsls	r3, r1, #2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	4631      	mov	r1, r6
 8004b14:	f7fc f850 	bl	8000bb8 <__aeabi_uldivmod>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004b20:	fba3 2302 	umull	r2, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	469b      	mov	fp, r3
 8004b2e:	f04f 0c00 	mov.w	ip, #0
 8004b32:	46d9      	mov	r9, fp
 8004b34:	46e2      	mov	sl, ip
 8004b36:	eb19 0309 	adds.w	r3, r9, r9
 8004b3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004b3e:	4699      	mov	r9, r3
 8004b40:	46a2      	mov	sl, r4
 8004b42:	eb19 090b 	adds.w	r9, r9, fp
 8004b46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b5e:	4689      	mov	r9, r1
 8004b60:	4692      	mov	sl, r2
 8004b62:	eb1b 0509 	adds.w	r5, fp, r9
 8004b66:	eb4c 060a 	adc.w	r6, ip, sl
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	f04f 0400 	mov.w	r4, #0
 8004b7c:	0094      	lsls	r4, r2, #2
 8004b7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b82:	008b      	lsls	r3, r1, #2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	f7fc f814 	bl	8000bb8 <__aeabi_uldivmod>
 8004b90:	4603      	mov	r3, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	461a      	mov	r2, r3
 8004b96:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004b98:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	2164      	movs	r1, #100	; 0x64
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	3332      	adds	r3, #50	; 0x32
 8004baa:	4a2d      	ldr	r2, [pc, #180]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	4498      	add	r8, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	469b      	mov	fp, r3
 8004bbc:	f04f 0c00 	mov.w	ip, #0
 8004bc0:	46d9      	mov	r9, fp
 8004bc2:	46e2      	mov	sl, ip
 8004bc4:	eb19 0309 	adds.w	r3, r9, r9
 8004bc8:	eb4a 040a 	adc.w	r4, sl, sl
 8004bcc:	4699      	mov	r9, r3
 8004bce:	46a2      	mov	sl, r4
 8004bd0:	eb19 090b 	adds.w	r9, r9, fp
 8004bd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004be8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bec:	4689      	mov	r9, r1
 8004bee:	4692      	mov	sl, r2
 8004bf0:	eb1b 0509 	adds.w	r5, fp, r9
 8004bf4:	eb4c 060a 	adc.w	r6, ip, sl
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	0094      	lsls	r4, r2, #2
 8004c0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c10:	008b      	lsls	r3, r1, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	4623      	mov	r3, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	4631      	mov	r1, r6
 8004c1a:	f7fb ffcd 	bl	8000bb8 <__aeabi_uldivmod>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004c26:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2164      	movs	r1, #100	; 0x64
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	3332      	adds	r3, #50	; 0x32
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <UART_SetConfig+0x6f4>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4442      	add	r2, r8
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	e7ff      	b.n	8004c4e <UART_SetConfig+0x6e2>
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40011400 	.word	0x40011400
 8004c60:	51eb851f 	.word	0x51eb851f

08004c64 <__errno>:
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <__errno+0x8>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <__libc_init_array>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4e0d      	ldr	r6, [pc, #52]	; (8004ca8 <__libc_init_array+0x38>)
 8004c74:	4c0d      	ldr	r4, [pc, #52]	; (8004cac <__libc_init_array+0x3c>)
 8004c76:	1ba4      	subs	r4, r4, r6
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	42a5      	cmp	r5, r4
 8004c7e:	d109      	bne.n	8004c94 <__libc_init_array+0x24>
 8004c80:	4e0b      	ldr	r6, [pc, #44]	; (8004cb0 <__libc_init_array+0x40>)
 8004c82:	4c0c      	ldr	r4, [pc, #48]	; (8004cb4 <__libc_init_array+0x44>)
 8004c84:	f002 f85e 	bl	8006d44 <_init>
 8004c88:	1ba4      	subs	r4, r4, r6
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	42a5      	cmp	r5, r4
 8004c90:	d105      	bne.n	8004c9e <__libc_init_array+0x2e>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c98:	4798      	blx	r3
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	e7ee      	b.n	8004c7c <__libc_init_array+0xc>
 8004c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca2:	4798      	blx	r3
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	e7f2      	b.n	8004c8e <__libc_init_array+0x1e>
 8004ca8:	08007050 	.word	0x08007050
 8004cac:	08007050 	.word	0x08007050
 8004cb0:	08007050 	.word	0x08007050
 8004cb4:	08007054 	.word	0x08007054

08004cb8 <memcpy>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	1e43      	subs	r3, r0, #1
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	d100      	bne.n	8004cc4 <memcpy+0xc>
 8004cc2:	bd10      	pop	{r4, pc}
 8004cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ccc:	e7f7      	b.n	8004cbe <memcpy+0x6>

08004cce <memset>:
 8004cce:	4402      	add	r2, r0
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d100      	bne.n	8004cd8 <memset+0xa>
 8004cd6:	4770      	bx	lr
 8004cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cdc:	e7f9      	b.n	8004cd2 <memset+0x4>

08004cde <__cvt>:
 8004cde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce2:	ec55 4b10 	vmov	r4, r5, d0
 8004ce6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ce8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	460e      	mov	r6, r1
 8004cf0:	4691      	mov	r9, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	bfb8      	it	lt
 8004cf6:	4622      	movlt	r2, r4
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	f027 0720 	bic.w	r7, r7, #32
 8004cfe:	bfbb      	ittet	lt
 8004d00:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d04:	461d      	movlt	r5, r3
 8004d06:	2300      	movge	r3, #0
 8004d08:	232d      	movlt	r3, #45	; 0x2d
 8004d0a:	bfb8      	it	lt
 8004d0c:	4614      	movlt	r4, r2
 8004d0e:	2f46      	cmp	r7, #70	; 0x46
 8004d10:	700b      	strb	r3, [r1, #0]
 8004d12:	d004      	beq.n	8004d1e <__cvt+0x40>
 8004d14:	2f45      	cmp	r7, #69	; 0x45
 8004d16:	d100      	bne.n	8004d1a <__cvt+0x3c>
 8004d18:	3601      	adds	r6, #1
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	e000      	b.n	8004d20 <__cvt+0x42>
 8004d1e:	2103      	movs	r1, #3
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	ab02      	add	r3, sp, #8
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4653      	mov	r3, sl
 8004d2c:	ec45 4b10 	vmov	d0, r4, r5
 8004d30:	f000 fcde 	bl	80056f0 <_dtoa_r>
 8004d34:	2f47      	cmp	r7, #71	; 0x47
 8004d36:	4680      	mov	r8, r0
 8004d38:	d102      	bne.n	8004d40 <__cvt+0x62>
 8004d3a:	f019 0f01 	tst.w	r9, #1
 8004d3e:	d026      	beq.n	8004d8e <__cvt+0xb0>
 8004d40:	2f46      	cmp	r7, #70	; 0x46
 8004d42:	eb08 0906 	add.w	r9, r8, r6
 8004d46:	d111      	bne.n	8004d6c <__cvt+0x8e>
 8004d48:	f898 3000 	ldrb.w	r3, [r8]
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d10a      	bne.n	8004d66 <__cvt+0x88>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d5c:	b918      	cbnz	r0, 8004d66 <__cvt+0x88>
 8004d5e:	f1c6 0601 	rsb	r6, r6, #1
 8004d62:	f8ca 6000 	str.w	r6, [sl]
 8004d66:	f8da 3000 	ldr.w	r3, [sl]
 8004d6a:	4499      	add	r9, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb feb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d78:	b938      	cbnz	r0, 8004d8a <__cvt+0xac>
 8004d7a:	2230      	movs	r2, #48	; 0x30
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	454b      	cmp	r3, r9
 8004d80:	d205      	bcs.n	8004d8e <__cvt+0xb0>
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	9103      	str	r1, [sp, #12]
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e7f8      	b.n	8004d7c <__cvt+0x9e>
 8004d8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d92:	eba3 0308 	sub.w	r3, r3, r8
 8004d96:	4640      	mov	r0, r8
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	b004      	add	sp, #16
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004da0 <__exponent>:
 8004da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004da2:	2900      	cmp	r1, #0
 8004da4:	4604      	mov	r4, r0
 8004da6:	bfba      	itte	lt
 8004da8:	4249      	neglt	r1, r1
 8004daa:	232d      	movlt	r3, #45	; 0x2d
 8004dac:	232b      	movge	r3, #43	; 0x2b
 8004dae:	2909      	cmp	r1, #9
 8004db0:	f804 2b02 	strb.w	r2, [r4], #2
 8004db4:	7043      	strb	r3, [r0, #1]
 8004db6:	dd20      	ble.n	8004dfa <__exponent+0x5a>
 8004db8:	f10d 0307 	add.w	r3, sp, #7
 8004dbc:	461f      	mov	r7, r3
 8004dbe:	260a      	movs	r6, #10
 8004dc0:	fb91 f5f6 	sdiv	r5, r1, r6
 8004dc4:	fb06 1115 	mls	r1, r6, r5, r1
 8004dc8:	3130      	adds	r1, #48	; 0x30
 8004dca:	2d09      	cmp	r5, #9
 8004dcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004dd0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	dc09      	bgt.n	8004dec <__exponent+0x4c>
 8004dd8:	3130      	adds	r1, #48	; 0x30
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004de0:	42bb      	cmp	r3, r7
 8004de2:	4622      	mov	r2, r4
 8004de4:	d304      	bcc.n	8004df0 <__exponent+0x50>
 8004de6:	1a10      	subs	r0, r2, r0
 8004de8:	b003      	add	sp, #12
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dec:	4613      	mov	r3, r2
 8004dee:	e7e7      	b.n	8004dc0 <__exponent+0x20>
 8004df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004df4:	f804 2b01 	strb.w	r2, [r4], #1
 8004df8:	e7f2      	b.n	8004de0 <__exponent+0x40>
 8004dfa:	2330      	movs	r3, #48	; 0x30
 8004dfc:	4419      	add	r1, r3
 8004dfe:	7083      	strb	r3, [r0, #2]
 8004e00:	1d02      	adds	r2, r0, #4
 8004e02:	70c1      	strb	r1, [r0, #3]
 8004e04:	e7ef      	b.n	8004de6 <__exponent+0x46>
	...

08004e08 <_printf_float>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b08d      	sub	sp, #52	; 0x34
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004e14:	4616      	mov	r6, r2
 8004e16:	461f      	mov	r7, r3
 8004e18:	4605      	mov	r5, r0
 8004e1a:	f001 fa21 	bl	8006260 <_localeconv_r>
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fb f9dc 	bl	80001e0 <strlen>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e30:	9005      	str	r0, [sp, #20]
 8004e32:	3307      	adds	r3, #7
 8004e34:	f023 0307 	bic.w	r3, r3, #7
 8004e38:	f103 0208 	add.w	r2, r3, #8
 8004e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e40:	f8d4 b000 	ldr.w	fp, [r4]
 8004e44:	f8c8 2000 	str.w	r2, [r8]
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e58:	9307      	str	r3, [sp, #28]
 8004e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e62:	4ba7      	ldr	r3, [pc, #668]	; (8005100 <_printf_float+0x2f8>)
 8004e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e68:	f7fb fe68 	bl	8000b3c <__aeabi_dcmpun>
 8004e6c:	bb70      	cbnz	r0, 8004ecc <_printf_float+0xc4>
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e72:	4ba3      	ldr	r3, [pc, #652]	; (8005100 <_printf_float+0x2f8>)
 8004e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e78:	f7fb fe42 	bl	8000b00 <__aeabi_dcmple>
 8004e7c:	bb30      	cbnz	r0, 8004ecc <_printf_float+0xc4>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2300      	movs	r3, #0
 8004e82:	4640      	mov	r0, r8
 8004e84:	4649      	mov	r1, r9
 8004e86:	f7fb fe31 	bl	8000aec <__aeabi_dcmplt>
 8004e8a:	b110      	cbz	r0, 8004e92 <_printf_float+0x8a>
 8004e8c:	232d      	movs	r3, #45	; 0x2d
 8004e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e92:	4a9c      	ldr	r2, [pc, #624]	; (8005104 <_printf_float+0x2fc>)
 8004e94:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <_printf_float+0x300>)
 8004e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e9a:	bf8c      	ite	hi
 8004e9c:	4690      	movhi	r8, r2
 8004e9e:	4698      	movls	r8, r3
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f02b 0204 	bic.w	r2, fp, #4
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	f04f 0900 	mov.w	r9, #0
 8004eae:	9700      	str	r7, [sp, #0]
 8004eb0:	4633      	mov	r3, r6
 8004eb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 f9e6 	bl	8005288 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f040 808d 	bne.w	8004fdc <_printf_float+0x1d4>
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec6:	b00d      	add	sp, #52	; 0x34
 8004ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	f7fb fe32 	bl	8000b3c <__aeabi_dcmpun>
 8004ed8:	b110      	cbz	r0, 8004ee0 <_printf_float+0xd8>
 8004eda:	4a8c      	ldr	r2, [pc, #560]	; (800510c <_printf_float+0x304>)
 8004edc:	4b8c      	ldr	r3, [pc, #560]	; (8005110 <_printf_float+0x308>)
 8004ede:	e7da      	b.n	8004e96 <_printf_float+0x8e>
 8004ee0:	6861      	ldr	r1, [r4, #4]
 8004ee2:	1c4b      	adds	r3, r1, #1
 8004ee4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004ee8:	a80a      	add	r0, sp, #40	; 0x28
 8004eea:	d13e      	bne.n	8004f6a <_printf_float+0x162>
 8004eec:	2306      	movs	r3, #6
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ef6:	ab09      	add	r3, sp, #36	; 0x24
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	ec49 8b10 	vmov	d0, r8, r9
 8004efe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	f8cd a004 	str.w	sl, [sp, #4]
 8004f08:	6861      	ldr	r1, [r4, #4]
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff fee7 	bl	8004cde <__cvt>
 8004f10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004f14:	2b47      	cmp	r3, #71	; 0x47
 8004f16:	4680      	mov	r8, r0
 8004f18:	d109      	bne.n	8004f2e <_printf_float+0x126>
 8004f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1c:	1cd8      	adds	r0, r3, #3
 8004f1e:	db02      	blt.n	8004f26 <_printf_float+0x11e>
 8004f20:	6862      	ldr	r2, [r4, #4]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	dd47      	ble.n	8004fb6 <_printf_float+0x1ae>
 8004f26:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f34:	d824      	bhi.n	8004f80 <_printf_float+0x178>
 8004f36:	3901      	subs	r1, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004f40:	f7ff ff2e 	bl	8004da0 <__exponent>
 8004f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f46:	1813      	adds	r3, r2, r0
 8004f48:	2a01      	cmp	r2, #1
 8004f4a:	4681      	mov	r9, r0
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	dc02      	bgt.n	8004f56 <_printf_float+0x14e>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	07d1      	lsls	r1, r2, #31
 8004f54:	d501      	bpl.n	8004f5a <_printf_float+0x152>
 8004f56:	3301      	adds	r3, #1
 8004f58:	6123      	str	r3, [r4, #16]
 8004f5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0a5      	beq.n	8004eae <_printf_float+0xa6>
 8004f62:	232d      	movs	r3, #45	; 0x2d
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f68:	e7a1      	b.n	8004eae <_printf_float+0xa6>
 8004f6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004f6e:	f000 8177 	beq.w	8005260 <_printf_float+0x458>
 8004f72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004f76:	d1bb      	bne.n	8004ef0 <_printf_float+0xe8>
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	d1b9      	bne.n	8004ef0 <_printf_float+0xe8>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e7b6      	b.n	8004eee <_printf_float+0xe6>
 8004f80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004f84:	d119      	bne.n	8004fba <_printf_float+0x1b2>
 8004f86:	2900      	cmp	r1, #0
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	dd0c      	ble.n	8004fa6 <_printf_float+0x19e>
 8004f8c:	6121      	str	r1, [r4, #16]
 8004f8e:	b913      	cbnz	r3, 8004f96 <_printf_float+0x18e>
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	07d2      	lsls	r2, r2, #31
 8004f94:	d502      	bpl.n	8004f9c <_printf_float+0x194>
 8004f96:	3301      	adds	r3, #1
 8004f98:	440b      	add	r3, r1
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fa0:	f04f 0900 	mov.w	r9, #0
 8004fa4:	e7d9      	b.n	8004f5a <_printf_float+0x152>
 8004fa6:	b913      	cbnz	r3, 8004fae <_printf_float+0x1a6>
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	07d0      	lsls	r0, r2, #31
 8004fac:	d501      	bpl.n	8004fb2 <_printf_float+0x1aa>
 8004fae:	3302      	adds	r3, #2
 8004fb0:	e7f3      	b.n	8004f9a <_printf_float+0x192>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e7f1      	b.n	8004f9a <_printf_float+0x192>
 8004fb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004fba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	db05      	blt.n	8004fce <_printf_float+0x1c6>
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	07d1      	lsls	r1, r2, #31
 8004fc8:	d5e8      	bpl.n	8004f9c <_printf_float+0x194>
 8004fca:	3301      	adds	r3, #1
 8004fcc:	e7e5      	b.n	8004f9a <_printf_float+0x192>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfd4      	ite	le
 8004fd2:	f1c3 0302 	rsble	r3, r3, #2
 8004fd6:	2301      	movgt	r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	e7de      	b.n	8004f9a <_printf_float+0x192>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	055a      	lsls	r2, r3, #21
 8004fe0:	d407      	bmi.n	8004ff2 <_printf_float+0x1ea>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b8      	blx	r7
 8004fec:	3001      	adds	r0, #1
 8004fee:	d12b      	bne.n	8005048 <_printf_float+0x240>
 8004ff0:	e767      	b.n	8004ec2 <_printf_float+0xba>
 8004ff2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004ff6:	f240 80dc 	bls.w	80051b2 <_printf_float+0x3aa>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005002:	f7fb fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8005006:	2800      	cmp	r0, #0
 8005008:	d033      	beq.n	8005072 <_printf_float+0x26a>
 800500a:	2301      	movs	r3, #1
 800500c:	4a41      	ldr	r2, [pc, #260]	; (8005114 <_printf_float+0x30c>)
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f af54 	beq.w	8004ec2 <_printf_float+0xba>
 800501a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800501e:	429a      	cmp	r2, r3
 8005020:	db02      	blt.n	8005028 <_printf_float+0x220>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	07d8      	lsls	r0, r3, #31
 8005026:	d50f      	bpl.n	8005048 <_printf_float+0x240>
 8005028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af45 	beq.w	8004ec2 <_printf_float+0xba>
 8005038:	f04f 0800 	mov.w	r8, #0
 800503c:	f104 091a 	add.w	r9, r4, #26
 8005040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	4543      	cmp	r3, r8
 8005046:	dc09      	bgt.n	800505c <_printf_float+0x254>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	079b      	lsls	r3, r3, #30
 800504c:	f100 8103 	bmi.w	8005256 <_printf_float+0x44e>
 8005050:	68e0      	ldr	r0, [r4, #12]
 8005052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005054:	4298      	cmp	r0, r3
 8005056:	bfb8      	it	lt
 8005058:	4618      	movlt	r0, r3
 800505a:	e734      	b.n	8004ec6 <_printf_float+0xbe>
 800505c:	2301      	movs	r3, #1
 800505e:	464a      	mov	r2, r9
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af2b 	beq.w	8004ec2 <_printf_float+0xba>
 800506c:	f108 0801 	add.w	r8, r8, #1
 8005070:	e7e6      	b.n	8005040 <_printf_float+0x238>
 8005072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	dc2b      	bgt.n	80050d0 <_printf_float+0x2c8>
 8005078:	2301      	movs	r3, #1
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <_printf_float+0x30c>)
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af1d 	beq.w	8004ec2 <_printf_float+0xba>
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	b923      	cbnz	r3, 8005096 <_printf_float+0x28e>
 800508c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508e:	b913      	cbnz	r3, 8005096 <_printf_float+0x28e>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	07d9      	lsls	r1, r3, #31
 8005094:	d5d8      	bpl.n	8005048 <_printf_float+0x240>
 8005096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f af0e 	beq.w	8004ec2 <_printf_float+0xba>
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	f104 0a1a 	add.w	sl, r4, #26
 80050ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b0:	425b      	negs	r3, r3
 80050b2:	454b      	cmp	r3, r9
 80050b4:	dc01      	bgt.n	80050ba <_printf_float+0x2b2>
 80050b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b8:	e794      	b.n	8004fe4 <_printf_float+0x1dc>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4652      	mov	r2, sl
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f aefc 	beq.w	8004ec2 <_printf_float+0xba>
 80050ca:	f109 0901 	add.w	r9, r9, #1
 80050ce:	e7ee      	b.n	80050ae <_printf_float+0x2a6>
 80050d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bfa8      	it	ge
 80050d8:	461a      	movge	r2, r3
 80050da:	2a00      	cmp	r2, #0
 80050dc:	4691      	mov	r9, r2
 80050de:	dd07      	ble.n	80050f0 <_printf_float+0x2e8>
 80050e0:	4613      	mov	r3, r2
 80050e2:	4631      	mov	r1, r6
 80050e4:	4642      	mov	r2, r8
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	f43f aee9 	beq.w	8004ec2 <_printf_float+0xba>
 80050f0:	f104 031a 	add.w	r3, r4, #26
 80050f4:	f04f 0b00 	mov.w	fp, #0
 80050f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050fc:	9306      	str	r3, [sp, #24]
 80050fe:	e015      	b.n	800512c <_printf_float+0x324>
 8005100:	7fefffff 	.word	0x7fefffff
 8005104:	08006dec 	.word	0x08006dec
 8005108:	08006de8 	.word	0x08006de8
 800510c:	08006df4 	.word	0x08006df4
 8005110:	08006df0 	.word	0x08006df0
 8005114:	08006df8 	.word	0x08006df8
 8005118:	2301      	movs	r3, #1
 800511a:	9a06      	ldr	r2, [sp, #24]
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f aecd 	beq.w	8004ec2 <_printf_float+0xba>
 8005128:	f10b 0b01 	add.w	fp, fp, #1
 800512c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005130:	ebaa 0309 	sub.w	r3, sl, r9
 8005134:	455b      	cmp	r3, fp
 8005136:	dcef      	bgt.n	8005118 <_printf_float+0x310>
 8005138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800513c:	429a      	cmp	r2, r3
 800513e:	44d0      	add	r8, sl
 8005140:	db15      	blt.n	800516e <_printf_float+0x366>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	07da      	lsls	r2, r3, #31
 8005146:	d412      	bmi.n	800516e <_printf_float+0x366>
 8005148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800514a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800514c:	eba3 020a 	sub.w	r2, r3, sl
 8005150:	eba3 0a01 	sub.w	sl, r3, r1
 8005154:	4592      	cmp	sl, r2
 8005156:	bfa8      	it	ge
 8005158:	4692      	movge	sl, r2
 800515a:	f1ba 0f00 	cmp.w	sl, #0
 800515e:	dc0e      	bgt.n	800517e <_printf_float+0x376>
 8005160:	f04f 0800 	mov.w	r8, #0
 8005164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005168:	f104 091a 	add.w	r9, r4, #26
 800516c:	e019      	b.n	80051a2 <_printf_float+0x39a>
 800516e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	d1e5      	bne.n	8005148 <_printf_float+0x340>
 800517c:	e6a1      	b.n	8004ec2 <_printf_float+0xba>
 800517e:	4653      	mov	r3, sl
 8005180:	4642      	mov	r2, r8
 8005182:	4631      	mov	r1, r6
 8005184:	4628      	mov	r0, r5
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	d1e9      	bne.n	8005160 <_printf_float+0x358>
 800518c:	e699      	b.n	8004ec2 <_printf_float+0xba>
 800518e:	2301      	movs	r3, #1
 8005190:	464a      	mov	r2, r9
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f ae92 	beq.w	8004ec2 <_printf_float+0xba>
 800519e:	f108 0801 	add.w	r8, r8, #1
 80051a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	eba3 030a 	sub.w	r3, r3, sl
 80051ac:	4543      	cmp	r3, r8
 80051ae:	dcee      	bgt.n	800518e <_printf_float+0x386>
 80051b0:	e74a      	b.n	8005048 <_printf_float+0x240>
 80051b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b4:	2a01      	cmp	r2, #1
 80051b6:	dc01      	bgt.n	80051bc <_printf_float+0x3b4>
 80051b8:	07db      	lsls	r3, r3, #31
 80051ba:	d53a      	bpl.n	8005232 <_printf_float+0x42a>
 80051bc:	2301      	movs	r3, #1
 80051be:	4642      	mov	r2, r8
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f ae7b 	beq.w	8004ec2 <_printf_float+0xba>
 80051cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f108 0801 	add.w	r8, r8, #1
 80051dc:	f43f ae71 	beq.w	8004ec2 <_printf_float+0xba>
 80051e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e2:	2200      	movs	r2, #0
 80051e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80051e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051ec:	2300      	movs	r3, #0
 80051ee:	f7fb fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f2:	b9c8      	cbnz	r0, 8005228 <_printf_float+0x420>
 80051f4:	4653      	mov	r3, sl
 80051f6:	4642      	mov	r2, r8
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	d10e      	bne.n	8005220 <_printf_float+0x418>
 8005202:	e65e      	b.n	8004ec2 <_printf_float+0xba>
 8005204:	2301      	movs	r3, #1
 8005206:	4652      	mov	r2, sl
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f ae57 	beq.w	8004ec2 <_printf_float+0xba>
 8005214:	f108 0801 	add.w	r8, r8, #1
 8005218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	4543      	cmp	r3, r8
 800521e:	dcf1      	bgt.n	8005204 <_printf_float+0x3fc>
 8005220:	464b      	mov	r3, r9
 8005222:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005226:	e6de      	b.n	8004fe6 <_printf_float+0x1de>
 8005228:	f04f 0800 	mov.w	r8, #0
 800522c:	f104 0a1a 	add.w	sl, r4, #26
 8005230:	e7f2      	b.n	8005218 <_printf_float+0x410>
 8005232:	2301      	movs	r3, #1
 8005234:	e7df      	b.n	80051f6 <_printf_float+0x3ee>
 8005236:	2301      	movs	r3, #1
 8005238:	464a      	mov	r2, r9
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae3e 	beq.w	8004ec2 <_printf_float+0xba>
 8005246:	f108 0801 	add.w	r8, r8, #1
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	4543      	cmp	r3, r8
 8005252:	dcf0      	bgt.n	8005236 <_printf_float+0x42e>
 8005254:	e6fc      	b.n	8005050 <_printf_float+0x248>
 8005256:	f04f 0800 	mov.w	r8, #0
 800525a:	f104 0919 	add.w	r9, r4, #25
 800525e:	e7f4      	b.n	800524a <_printf_float+0x442>
 8005260:	2900      	cmp	r1, #0
 8005262:	f43f ae8b 	beq.w	8004f7c <_printf_float+0x174>
 8005266:	2300      	movs	r3, #0
 8005268:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800526c:	ab09      	add	r3, sp, #36	; 0x24
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	ec49 8b10 	vmov	d0, r8, r9
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	f8cd a004 	str.w	sl, [sp, #4]
 800527a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800527e:	4628      	mov	r0, r5
 8005280:	f7ff fd2d 	bl	8004cde <__cvt>
 8005284:	4680      	mov	r8, r0
 8005286:	e648      	b.n	8004f1a <_printf_float+0x112>

08005288 <_printf_common>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	4691      	mov	r9, r2
 800528e:	461f      	mov	r7, r3
 8005290:	688a      	ldr	r2, [r1, #8]
 8005292:	690b      	ldr	r3, [r1, #16]
 8005294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005298:	4293      	cmp	r3, r2
 800529a:	bfb8      	it	lt
 800529c:	4613      	movlt	r3, r2
 800529e:	f8c9 3000 	str.w	r3, [r9]
 80052a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a6:	4606      	mov	r6, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	b112      	cbz	r2, 80052b2 <_printf_common+0x2a>
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c9 3000 	str.w	r3, [r9]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	0699      	lsls	r1, r3, #26
 80052b6:	bf42      	ittt	mi
 80052b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052bc:	3302      	addmi	r3, #2
 80052be:	f8c9 3000 	strmi.w	r3, [r9]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	f015 0506 	ands.w	r5, r5, #6
 80052c8:	d107      	bne.n	80052da <_printf_common+0x52>
 80052ca:	f104 0a19 	add.w	sl, r4, #25
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	f8d9 2000 	ldr.w	r2, [r9]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	42ab      	cmp	r3, r5
 80052d8:	dc28      	bgt.n	800532c <_printf_common+0xa4>
 80052da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	3300      	adds	r3, #0
 80052e2:	bf18      	it	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	0692      	lsls	r2, r2, #26
 80052e8:	d42d      	bmi.n	8005346 <_printf_common+0xbe>
 80052ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ee:	4639      	mov	r1, r7
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	3001      	adds	r0, #1
 80052f6:	d020      	beq.n	800533a <_printf_common+0xb2>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	68e5      	ldr	r5, [r4, #12]
 80052fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005300:	f003 0306 	and.w	r3, r3, #6
 8005304:	2b04      	cmp	r3, #4
 8005306:	bf08      	it	eq
 8005308:	1aad      	subeq	r5, r5, r2
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	bf0c      	ite	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	2500      	movne	r5, #0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfc4      	itt	gt
 800531a:	1a9b      	subgt	r3, r3, r2
 800531c:	18ed      	addgt	r5, r5, r3
 800531e:	f04f 0900 	mov.w	r9, #0
 8005322:	341a      	adds	r4, #26
 8005324:	454d      	cmp	r5, r9
 8005326:	d11a      	bne.n	800535e <_printf_common+0xd6>
 8005328:	2000      	movs	r0, #0
 800532a:	e008      	b.n	800533e <_printf_common+0xb6>
 800532c:	2301      	movs	r3, #1
 800532e:	4652      	mov	r2, sl
 8005330:	4639      	mov	r1, r7
 8005332:	4630      	mov	r0, r6
 8005334:	47c0      	blx	r8
 8005336:	3001      	adds	r0, #1
 8005338:	d103      	bne.n	8005342 <_printf_common+0xba>
 800533a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005342:	3501      	adds	r5, #1
 8005344:	e7c3      	b.n	80052ce <_printf_common+0x46>
 8005346:	18e1      	adds	r1, r4, r3
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	2030      	movs	r0, #48	; 0x30
 800534c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005350:	4422      	add	r2, r4
 8005352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535a:	3302      	adds	r3, #2
 800535c:	e7c5      	b.n	80052ea <_printf_common+0x62>
 800535e:	2301      	movs	r3, #1
 8005360:	4622      	mov	r2, r4
 8005362:	4639      	mov	r1, r7
 8005364:	4630      	mov	r0, r6
 8005366:	47c0      	blx	r8
 8005368:	3001      	adds	r0, #1
 800536a:	d0e6      	beq.n	800533a <_printf_common+0xb2>
 800536c:	f109 0901 	add.w	r9, r9, #1
 8005370:	e7d8      	b.n	8005324 <_printf_common+0x9c>
	...

08005374 <_printf_i>:
 8005374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800537c:	460c      	mov	r4, r1
 800537e:	7e09      	ldrb	r1, [r1, #24]
 8005380:	b085      	sub	sp, #20
 8005382:	296e      	cmp	r1, #110	; 0x6e
 8005384:	4617      	mov	r7, r2
 8005386:	4606      	mov	r6, r0
 8005388:	4698      	mov	r8, r3
 800538a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800538c:	f000 80b3 	beq.w	80054f6 <_printf_i+0x182>
 8005390:	d822      	bhi.n	80053d8 <_printf_i+0x64>
 8005392:	2963      	cmp	r1, #99	; 0x63
 8005394:	d036      	beq.n	8005404 <_printf_i+0x90>
 8005396:	d80a      	bhi.n	80053ae <_printf_i+0x3a>
 8005398:	2900      	cmp	r1, #0
 800539a:	f000 80b9 	beq.w	8005510 <_printf_i+0x19c>
 800539e:	2958      	cmp	r1, #88	; 0x58
 80053a0:	f000 8083 	beq.w	80054aa <_printf_i+0x136>
 80053a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053ac:	e032      	b.n	8005414 <_printf_i+0xa0>
 80053ae:	2964      	cmp	r1, #100	; 0x64
 80053b0:	d001      	beq.n	80053b6 <_printf_i+0x42>
 80053b2:	2969      	cmp	r1, #105	; 0x69
 80053b4:	d1f6      	bne.n	80053a4 <_printf_i+0x30>
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	6813      	ldr	r3, [r2, #0]
 80053ba:	0605      	lsls	r5, r0, #24
 80053bc:	f103 0104 	add.w	r1, r3, #4
 80053c0:	d52a      	bpl.n	8005418 <_printf_i+0xa4>
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da03      	bge.n	80053d2 <_printf_i+0x5e>
 80053ca:	222d      	movs	r2, #45	; 0x2d
 80053cc:	425b      	negs	r3, r3
 80053ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053d2:	486f      	ldr	r0, [pc, #444]	; (8005590 <_printf_i+0x21c>)
 80053d4:	220a      	movs	r2, #10
 80053d6:	e039      	b.n	800544c <_printf_i+0xd8>
 80053d8:	2973      	cmp	r1, #115	; 0x73
 80053da:	f000 809d 	beq.w	8005518 <_printf_i+0x1a4>
 80053de:	d808      	bhi.n	80053f2 <_printf_i+0x7e>
 80053e0:	296f      	cmp	r1, #111	; 0x6f
 80053e2:	d020      	beq.n	8005426 <_printf_i+0xb2>
 80053e4:	2970      	cmp	r1, #112	; 0x70
 80053e6:	d1dd      	bne.n	80053a4 <_printf_i+0x30>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f043 0320 	orr.w	r3, r3, #32
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	e003      	b.n	80053fa <_printf_i+0x86>
 80053f2:	2975      	cmp	r1, #117	; 0x75
 80053f4:	d017      	beq.n	8005426 <_printf_i+0xb2>
 80053f6:	2978      	cmp	r1, #120	; 0x78
 80053f8:	d1d4      	bne.n	80053a4 <_printf_i+0x30>
 80053fa:	2378      	movs	r3, #120	; 0x78
 80053fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005400:	4864      	ldr	r0, [pc, #400]	; (8005594 <_printf_i+0x220>)
 8005402:	e055      	b.n	80054b0 <_printf_i+0x13c>
 8005404:	6813      	ldr	r3, [r2, #0]
 8005406:	1d19      	adds	r1, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6011      	str	r1, [r2, #0]
 800540c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005414:	2301      	movs	r3, #1
 8005416:	e08c      	b.n	8005532 <_printf_i+0x1be>
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6011      	str	r1, [r2, #0]
 800541c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005420:	bf18      	it	ne
 8005422:	b21b      	sxthne	r3, r3
 8005424:	e7cf      	b.n	80053c6 <_printf_i+0x52>
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	1d18      	adds	r0, r3, #4
 800542c:	6010      	str	r0, [r2, #0]
 800542e:	0628      	lsls	r0, r5, #24
 8005430:	d501      	bpl.n	8005436 <_printf_i+0xc2>
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	e002      	b.n	800543c <_printf_i+0xc8>
 8005436:	0668      	lsls	r0, r5, #25
 8005438:	d5fb      	bpl.n	8005432 <_printf_i+0xbe>
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	4854      	ldr	r0, [pc, #336]	; (8005590 <_printf_i+0x21c>)
 800543e:	296f      	cmp	r1, #111	; 0x6f
 8005440:	bf14      	ite	ne
 8005442:	220a      	movne	r2, #10
 8005444:	2208      	moveq	r2, #8
 8005446:	2100      	movs	r1, #0
 8005448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544c:	6865      	ldr	r5, [r4, #4]
 800544e:	60a5      	str	r5, [r4, #8]
 8005450:	2d00      	cmp	r5, #0
 8005452:	f2c0 8095 	blt.w	8005580 <_printf_i+0x20c>
 8005456:	6821      	ldr	r1, [r4, #0]
 8005458:	f021 0104 	bic.w	r1, r1, #4
 800545c:	6021      	str	r1, [r4, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13d      	bne.n	80054de <_printf_i+0x16a>
 8005462:	2d00      	cmp	r5, #0
 8005464:	f040 808e 	bne.w	8005584 <_printf_i+0x210>
 8005468:	4665      	mov	r5, ip
 800546a:	2a08      	cmp	r2, #8
 800546c:	d10b      	bne.n	8005486 <_printf_i+0x112>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	07db      	lsls	r3, r3, #31
 8005472:	d508      	bpl.n	8005486 <_printf_i+0x112>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	bfde      	ittt	le
 800547c:	2330      	movle	r3, #48	; 0x30
 800547e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005482:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005486:	ebac 0305 	sub.w	r3, ip, r5
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	f8cd 8000 	str.w	r8, [sp]
 8005490:	463b      	mov	r3, r7
 8005492:	aa03      	add	r2, sp, #12
 8005494:	4621      	mov	r1, r4
 8005496:	4630      	mov	r0, r6
 8005498:	f7ff fef6 	bl	8005288 <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	d14d      	bne.n	800553c <_printf_i+0x1c8>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a4:	b005      	add	sp, #20
 80054a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054aa:	4839      	ldr	r0, [pc, #228]	; (8005590 <_printf_i+0x21c>)
 80054ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	6821      	ldr	r1, [r4, #0]
 80054b4:	1d1d      	adds	r5, r3, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6015      	str	r5, [r2, #0]
 80054ba:	060a      	lsls	r2, r1, #24
 80054bc:	d50b      	bpl.n	80054d6 <_printf_i+0x162>
 80054be:	07ca      	lsls	r2, r1, #31
 80054c0:	bf44      	itt	mi
 80054c2:	f041 0120 	orrmi.w	r1, r1, #32
 80054c6:	6021      	strmi	r1, [r4, #0]
 80054c8:	b91b      	cbnz	r3, 80054d2 <_printf_i+0x15e>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	f022 0220 	bic.w	r2, r2, #32
 80054d0:	6022      	str	r2, [r4, #0]
 80054d2:	2210      	movs	r2, #16
 80054d4:	e7b7      	b.n	8005446 <_printf_i+0xd2>
 80054d6:	064d      	lsls	r5, r1, #25
 80054d8:	bf48      	it	mi
 80054da:	b29b      	uxthmi	r3, r3
 80054dc:	e7ef      	b.n	80054be <_printf_i+0x14a>
 80054de:	4665      	mov	r5, ip
 80054e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80054e4:	fb02 3311 	mls	r3, r2, r1, r3
 80054e8:	5cc3      	ldrb	r3, [r0, r3]
 80054ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054ee:	460b      	mov	r3, r1
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d1f5      	bne.n	80054e0 <_printf_i+0x16c>
 80054f4:	e7b9      	b.n	800546a <_printf_i+0xf6>
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	6961      	ldr	r1, [r4, #20]
 80054fc:	1d18      	adds	r0, r3, #4
 80054fe:	6010      	str	r0, [r2, #0]
 8005500:	0628      	lsls	r0, r5, #24
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	d501      	bpl.n	800550a <_printf_i+0x196>
 8005506:	6019      	str	r1, [r3, #0]
 8005508:	e002      	b.n	8005510 <_printf_i+0x19c>
 800550a:	066a      	lsls	r2, r5, #25
 800550c:	d5fb      	bpl.n	8005506 <_printf_i+0x192>
 800550e:	8019      	strh	r1, [r3, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	4665      	mov	r5, ip
 8005516:	e7b9      	b.n	800548c <_printf_i+0x118>
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	1d19      	adds	r1, r3, #4
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	681d      	ldr	r5, [r3, #0]
 8005520:	6862      	ldr	r2, [r4, #4]
 8005522:	2100      	movs	r1, #0
 8005524:	4628      	mov	r0, r5
 8005526:	f7fa fe63 	bl	80001f0 <memchr>
 800552a:	b108      	cbz	r0, 8005530 <_printf_i+0x1bc>
 800552c:	1b40      	subs	r0, r0, r5
 800552e:	6060      	str	r0, [r4, #4]
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	2300      	movs	r3, #0
 8005536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800553a:	e7a7      	b.n	800548c <_printf_i+0x118>
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	462a      	mov	r2, r5
 8005540:	4639      	mov	r1, r7
 8005542:	4630      	mov	r0, r6
 8005544:	47c0      	blx	r8
 8005546:	3001      	adds	r0, #1
 8005548:	d0aa      	beq.n	80054a0 <_printf_i+0x12c>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	079b      	lsls	r3, r3, #30
 800554e:	d413      	bmi.n	8005578 <_printf_i+0x204>
 8005550:	68e0      	ldr	r0, [r4, #12]
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	4298      	cmp	r0, r3
 8005556:	bfb8      	it	lt
 8005558:	4618      	movlt	r0, r3
 800555a:	e7a3      	b.n	80054a4 <_printf_i+0x130>
 800555c:	2301      	movs	r3, #1
 800555e:	464a      	mov	r2, r9
 8005560:	4639      	mov	r1, r7
 8005562:	4630      	mov	r0, r6
 8005564:	47c0      	blx	r8
 8005566:	3001      	adds	r0, #1
 8005568:	d09a      	beq.n	80054a0 <_printf_i+0x12c>
 800556a:	3501      	adds	r5, #1
 800556c:	68e3      	ldr	r3, [r4, #12]
 800556e:	9a03      	ldr	r2, [sp, #12]
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	42ab      	cmp	r3, r5
 8005574:	dcf2      	bgt.n	800555c <_printf_i+0x1e8>
 8005576:	e7eb      	b.n	8005550 <_printf_i+0x1dc>
 8005578:	2500      	movs	r5, #0
 800557a:	f104 0919 	add.w	r9, r4, #25
 800557e:	e7f5      	b.n	800556c <_printf_i+0x1f8>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ac      	bne.n	80054de <_printf_i+0x16a>
 8005584:	7803      	ldrb	r3, [r0, #0]
 8005586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800558a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558e:	e76c      	b.n	800546a <_printf_i+0xf6>
 8005590:	08006dfa 	.word	0x08006dfa
 8005594:	08006e0b 	.word	0x08006e0b

08005598 <siprintf>:
 8005598:	b40e      	push	{r1, r2, r3}
 800559a:	b500      	push	{lr}
 800559c:	b09c      	sub	sp, #112	; 0x70
 800559e:	ab1d      	add	r3, sp, #116	; 0x74
 80055a0:	9002      	str	r0, [sp, #8]
 80055a2:	9006      	str	r0, [sp, #24]
 80055a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055a8:	4809      	ldr	r0, [pc, #36]	; (80055d0 <siprintf+0x38>)
 80055aa:	9107      	str	r1, [sp, #28]
 80055ac:	9104      	str	r1, [sp, #16]
 80055ae:	4909      	ldr	r1, [pc, #36]	; (80055d4 <siprintf+0x3c>)
 80055b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b4:	9105      	str	r1, [sp, #20]
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	a902      	add	r1, sp, #8
 80055bc:	f001 fa52 	bl	8006a64 <_svfiprintf_r>
 80055c0:	9b02      	ldr	r3, [sp, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	b01c      	add	sp, #112	; 0x70
 80055c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055cc:	b003      	add	sp, #12
 80055ce:	4770      	bx	lr
 80055d0:	2000000c 	.word	0x2000000c
 80055d4:	ffff0208 	.word	0xffff0208

080055d8 <quorem>:
 80055d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	6903      	ldr	r3, [r0, #16]
 80055de:	690c      	ldr	r4, [r1, #16]
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	4680      	mov	r8, r0
 80055e4:	f2c0 8082 	blt.w	80056ec <quorem+0x114>
 80055e8:	3c01      	subs	r4, #1
 80055ea:	f101 0714 	add.w	r7, r1, #20
 80055ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80055f2:	f100 0614 	add.w	r6, r0, #20
 80055f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80055fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80055fe:	eb06 030c 	add.w	r3, r6, ip
 8005602:	3501      	adds	r5, #1
 8005604:	eb07 090c 	add.w	r9, r7, ip
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	fbb0 f5f5 	udiv	r5, r0, r5
 800560e:	b395      	cbz	r5, 8005676 <quorem+0x9e>
 8005610:	f04f 0a00 	mov.w	sl, #0
 8005614:	4638      	mov	r0, r7
 8005616:	46b6      	mov	lr, r6
 8005618:	46d3      	mov	fp, sl
 800561a:	f850 2b04 	ldr.w	r2, [r0], #4
 800561e:	b293      	uxth	r3, r2
 8005620:	fb05 a303 	mla	r3, r5, r3, sl
 8005624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005628:	b29b      	uxth	r3, r3
 800562a:	ebab 0303 	sub.w	r3, fp, r3
 800562e:	0c12      	lsrs	r2, r2, #16
 8005630:	f8de b000 	ldr.w	fp, [lr]
 8005634:	fb05 a202 	mla	r2, r5, r2, sl
 8005638:	fa13 f38b 	uxtah	r3, r3, fp
 800563c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005640:	fa1f fb82 	uxth.w	fp, r2
 8005644:	f8de 2000 	ldr.w	r2, [lr]
 8005648:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800564c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005656:	4581      	cmp	r9, r0
 8005658:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800565c:	f84e 3b04 	str.w	r3, [lr], #4
 8005660:	d2db      	bcs.n	800561a <quorem+0x42>
 8005662:	f856 300c 	ldr.w	r3, [r6, ip]
 8005666:	b933      	cbnz	r3, 8005676 <quorem+0x9e>
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	3b04      	subs	r3, #4
 800566c:	429e      	cmp	r6, r3
 800566e:	461a      	mov	r2, r3
 8005670:	d330      	bcc.n	80056d4 <quorem+0xfc>
 8005672:	f8c8 4010 	str.w	r4, [r8, #16]
 8005676:	4640      	mov	r0, r8
 8005678:	f001 f81e 	bl	80066b8 <__mcmp>
 800567c:	2800      	cmp	r0, #0
 800567e:	db25      	blt.n	80056cc <quorem+0xf4>
 8005680:	3501      	adds	r5, #1
 8005682:	4630      	mov	r0, r6
 8005684:	f04f 0c00 	mov.w	ip, #0
 8005688:	f857 2b04 	ldr.w	r2, [r7], #4
 800568c:	f8d0 e000 	ldr.w	lr, [r0]
 8005690:	b293      	uxth	r3, r2
 8005692:	ebac 0303 	sub.w	r3, ip, r3
 8005696:	0c12      	lsrs	r2, r2, #16
 8005698:	fa13 f38e 	uxtah	r3, r3, lr
 800569c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056aa:	45b9      	cmp	r9, r7
 80056ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056b0:	f840 3b04 	str.w	r3, [r0], #4
 80056b4:	d2e8      	bcs.n	8005688 <quorem+0xb0>
 80056b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80056ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80056be:	b92a      	cbnz	r2, 80056cc <quorem+0xf4>
 80056c0:	3b04      	subs	r3, #4
 80056c2:	429e      	cmp	r6, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	d30b      	bcc.n	80056e0 <quorem+0x108>
 80056c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80056cc:	4628      	mov	r0, r5
 80056ce:	b003      	add	sp, #12
 80056d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	3b04      	subs	r3, #4
 80056d8:	2a00      	cmp	r2, #0
 80056da:	d1ca      	bne.n	8005672 <quorem+0x9a>
 80056dc:	3c01      	subs	r4, #1
 80056de:	e7c5      	b.n	800566c <quorem+0x94>
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	3b04      	subs	r3, #4
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d1ef      	bne.n	80056c8 <quorem+0xf0>
 80056e8:	3c01      	subs	r4, #1
 80056ea:	e7ea      	b.n	80056c2 <quorem+0xea>
 80056ec:	2000      	movs	r0, #0
 80056ee:	e7ee      	b.n	80056ce <quorem+0xf6>

080056f0 <_dtoa_r>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	ec57 6b10 	vmov	r6, r7, d0
 80056f8:	b097      	sub	sp, #92	; 0x5c
 80056fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056fc:	9106      	str	r1, [sp, #24]
 80056fe:	4604      	mov	r4, r0
 8005700:	920b      	str	r2, [sp, #44]	; 0x2c
 8005702:	9312      	str	r3, [sp, #72]	; 0x48
 8005704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005708:	e9cd 6700 	strd	r6, r7, [sp]
 800570c:	b93d      	cbnz	r5, 800571e <_dtoa_r+0x2e>
 800570e:	2010      	movs	r0, #16
 8005710:	f000 fdb4 	bl	800627c <malloc>
 8005714:	6260      	str	r0, [r4, #36]	; 0x24
 8005716:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800571a:	6005      	str	r5, [r0, #0]
 800571c:	60c5      	str	r5, [r0, #12]
 800571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	b151      	cbz	r1, 800573a <_dtoa_r+0x4a>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	604a      	str	r2, [r1, #4]
 8005728:	2301      	movs	r3, #1
 800572a:	4093      	lsls	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fde0 	bl	80062f4 <_Bfree>
 8005734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	1e3b      	subs	r3, r7, #0
 800573c:	bfbb      	ittet	lt
 800573e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005742:	9301      	strlt	r3, [sp, #4]
 8005744:	2300      	movge	r3, #0
 8005746:	2201      	movlt	r2, #1
 8005748:	bfac      	ite	ge
 800574a:	f8c8 3000 	strge.w	r3, [r8]
 800574e:	f8c8 2000 	strlt.w	r2, [r8]
 8005752:	4baf      	ldr	r3, [pc, #700]	; (8005a10 <_dtoa_r+0x320>)
 8005754:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005758:	ea33 0308 	bics.w	r3, r3, r8
 800575c:	d114      	bne.n	8005788 <_dtoa_r+0x98>
 800575e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005760:	f242 730f 	movw	r3, #9999	; 0x270f
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	9b00      	ldr	r3, [sp, #0]
 8005768:	b923      	cbnz	r3, 8005774 <_dtoa_r+0x84>
 800576a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800576e:	2800      	cmp	r0, #0
 8005770:	f000 8542 	beq.w	80061f8 <_dtoa_r+0xb08>
 8005774:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005776:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005a24 <_dtoa_r+0x334>
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8544 	beq.w	8006208 <_dtoa_r+0xb18>
 8005780:	f10b 0303 	add.w	r3, fp, #3
 8005784:	f000 bd3e 	b.w	8006204 <_dtoa_r+0xb14>
 8005788:	e9dd 6700 	ldrd	r6, r7, [sp]
 800578c:	2200      	movs	r2, #0
 800578e:	2300      	movs	r3, #0
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fb f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005798:	4681      	mov	r9, r0
 800579a:	b168      	cbz	r0, 80057b8 <_dtoa_r+0xc8>
 800579c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800579e:	2301      	movs	r3, #1
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8524 	beq.w	80061f2 <_dtoa_r+0xb02>
 80057aa:	4b9a      	ldr	r3, [pc, #616]	; (8005a14 <_dtoa_r+0x324>)
 80057ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057ae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	f000 bd28 	b.w	8006208 <_dtoa_r+0xb18>
 80057b8:	aa14      	add	r2, sp, #80	; 0x50
 80057ba:	a915      	add	r1, sp, #84	; 0x54
 80057bc:	ec47 6b10 	vmov	d0, r6, r7
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 fff0 	bl	80067a6 <__d2b>
 80057c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057ca:	9004      	str	r0, [sp, #16]
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	d07c      	beq.n	80058ca <_dtoa_r+0x1da>
 80057d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80057d8:	46b2      	mov	sl, r6
 80057da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80057de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80057e6:	2200      	movs	r2, #0
 80057e8:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <_dtoa_r+0x328>)
 80057ea:	4650      	mov	r0, sl
 80057ec:	4659      	mov	r1, fp
 80057ee:	f7fa fd53 	bl	8000298 <__aeabi_dsub>
 80057f2:	a381      	add	r3, pc, #516	; (adr r3, 80059f8 <_dtoa_r+0x308>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa ff06 	bl	8000608 <__aeabi_dmul>
 80057fc:	a380      	add	r3, pc, #512	; (adr r3, 8005a00 <_dtoa_r+0x310>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f7fa fd4b 	bl	800029c <__adddf3>
 8005806:	4606      	mov	r6, r0
 8005808:	4628      	mov	r0, r5
 800580a:	460f      	mov	r7, r1
 800580c:	f7fa fe92 	bl	8000534 <__aeabi_i2d>
 8005810:	a37d      	add	r3, pc, #500	; (adr r3, 8005a08 <_dtoa_r+0x318>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fa fef7 	bl	8000608 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4630      	mov	r0, r6
 8005820:	4639      	mov	r1, r7
 8005822:	f7fa fd3b 	bl	800029c <__adddf3>
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	f7fb f99d 	bl	8000b68 <__aeabi_d2iz>
 800582e:	2200      	movs	r2, #0
 8005830:	4682      	mov	sl, r0
 8005832:	2300      	movs	r3, #0
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fb f958 	bl	8000aec <__aeabi_dcmplt>
 800583c:	b148      	cbz	r0, 8005852 <_dtoa_r+0x162>
 800583e:	4650      	mov	r0, sl
 8005840:	f7fa fe78 	bl	8000534 <__aeabi_i2d>
 8005844:	4632      	mov	r2, r6
 8005846:	463b      	mov	r3, r7
 8005848:	f7fb f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800584c:	b908      	cbnz	r0, 8005852 <_dtoa_r+0x162>
 800584e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005852:	f1ba 0f16 	cmp.w	sl, #22
 8005856:	d859      	bhi.n	800590c <_dtoa_r+0x21c>
 8005858:	4970      	ldr	r1, [pc, #448]	; (8005a1c <_dtoa_r+0x32c>)
 800585a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800585e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005866:	f7fb f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800586a:	2800      	cmp	r0, #0
 800586c:	d050      	beq.n	8005910 <_dtoa_r+0x220>
 800586e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005872:	2300      	movs	r3, #0
 8005874:	930f      	str	r3, [sp, #60]	; 0x3c
 8005876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005878:	1b5d      	subs	r5, r3, r5
 800587a:	f1b5 0801 	subs.w	r8, r5, #1
 800587e:	bf49      	itett	mi
 8005880:	f1c5 0301 	rsbmi	r3, r5, #1
 8005884:	2300      	movpl	r3, #0
 8005886:	9305      	strmi	r3, [sp, #20]
 8005888:	f04f 0800 	movmi.w	r8, #0
 800588c:	bf58      	it	pl
 800588e:	9305      	strpl	r3, [sp, #20]
 8005890:	f1ba 0f00 	cmp.w	sl, #0
 8005894:	db3e      	blt.n	8005914 <_dtoa_r+0x224>
 8005896:	2300      	movs	r3, #0
 8005898:	44d0      	add	r8, sl
 800589a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800589e:	9307      	str	r3, [sp, #28]
 80058a0:	9b06      	ldr	r3, [sp, #24]
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	f200 8090 	bhi.w	80059c8 <_dtoa_r+0x2d8>
 80058a8:	2b05      	cmp	r3, #5
 80058aa:	bfc4      	itt	gt
 80058ac:	3b04      	subgt	r3, #4
 80058ae:	9306      	strgt	r3, [sp, #24]
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	f1a3 0302 	sub.w	r3, r3, #2
 80058b6:	bfcc      	ite	gt
 80058b8:	2500      	movgt	r5, #0
 80058ba:	2501      	movle	r5, #1
 80058bc:	2b03      	cmp	r3, #3
 80058be:	f200 808f 	bhi.w	80059e0 <_dtoa_r+0x2f0>
 80058c2:	e8df f003 	tbb	[pc, r3]
 80058c6:	7f7d      	.short	0x7f7d
 80058c8:	7131      	.short	0x7131
 80058ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80058ce:	441d      	add	r5, r3
 80058d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80058d4:	2820      	cmp	r0, #32
 80058d6:	dd13      	ble.n	8005900 <_dtoa_r+0x210>
 80058d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80058dc:	9b00      	ldr	r3, [sp, #0]
 80058de:	fa08 f800 	lsl.w	r8, r8, r0
 80058e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80058e6:	fa23 f000 	lsr.w	r0, r3, r0
 80058ea:	ea48 0000 	orr.w	r0, r8, r0
 80058ee:	f7fa fe11 	bl	8000514 <__aeabi_ui2d>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4682      	mov	sl, r0
 80058f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80058fa:	3d01      	subs	r5, #1
 80058fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80058fe:	e772      	b.n	80057e6 <_dtoa_r+0xf6>
 8005900:	9b00      	ldr	r3, [sp, #0]
 8005902:	f1c0 0020 	rsb	r0, r0, #32
 8005906:	fa03 f000 	lsl.w	r0, r3, r0
 800590a:	e7f0      	b.n	80058ee <_dtoa_r+0x1fe>
 800590c:	2301      	movs	r3, #1
 800590e:	e7b1      	b.n	8005874 <_dtoa_r+0x184>
 8005910:	900f      	str	r0, [sp, #60]	; 0x3c
 8005912:	e7b0      	b.n	8005876 <_dtoa_r+0x186>
 8005914:	9b05      	ldr	r3, [sp, #20]
 8005916:	eba3 030a 	sub.w	r3, r3, sl
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	f1ca 0300 	rsb	r3, sl, #0
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	2300      	movs	r3, #0
 8005924:	930e      	str	r3, [sp, #56]	; 0x38
 8005926:	e7bb      	b.n	80058a0 <_dtoa_r+0x1b0>
 8005928:	2301      	movs	r3, #1
 800592a:	930a      	str	r3, [sp, #40]	; 0x28
 800592c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd59      	ble.n	80059e6 <_dtoa_r+0x2f6>
 8005932:	9302      	str	r3, [sp, #8]
 8005934:	4699      	mov	r9, r3
 8005936:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005938:	2200      	movs	r2, #0
 800593a:	6072      	str	r2, [r6, #4]
 800593c:	2204      	movs	r2, #4
 800593e:	f102 0014 	add.w	r0, r2, #20
 8005942:	4298      	cmp	r0, r3
 8005944:	6871      	ldr	r1, [r6, #4]
 8005946:	d953      	bls.n	80059f0 <_dtoa_r+0x300>
 8005948:	4620      	mov	r0, r4
 800594a:	f000 fc9f 	bl	800628c <_Balloc>
 800594e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005950:	6030      	str	r0, [r6, #0]
 8005952:	f1b9 0f0e 	cmp.w	r9, #14
 8005956:	f8d3 b000 	ldr.w	fp, [r3]
 800595a:	f200 80e6 	bhi.w	8005b2a <_dtoa_r+0x43a>
 800595e:	2d00      	cmp	r5, #0
 8005960:	f000 80e3 	beq.w	8005b2a <_dtoa_r+0x43a>
 8005964:	ed9d 7b00 	vldr	d7, [sp]
 8005968:	f1ba 0f00 	cmp.w	sl, #0
 800596c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005970:	dd74      	ble.n	8005a5c <_dtoa_r+0x36c>
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <_dtoa_r+0x32c>)
 8005974:	f00a 030f 	and.w	r3, sl, #15
 8005978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800597c:	ed93 7b00 	vldr	d7, [r3]
 8005980:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005984:	06f0      	lsls	r0, r6, #27
 8005986:	ed8d 7b08 	vstr	d7, [sp, #32]
 800598a:	d565      	bpl.n	8005a58 <_dtoa_r+0x368>
 800598c:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <_dtoa_r+0x330>)
 800598e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005992:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005996:	f7fa ff61 	bl	800085c <__aeabi_ddiv>
 800599a:	e9cd 0100 	strd	r0, r1, [sp]
 800599e:	f006 060f 	and.w	r6, r6, #15
 80059a2:	2503      	movs	r5, #3
 80059a4:	4f1e      	ldr	r7, [pc, #120]	; (8005a20 <_dtoa_r+0x330>)
 80059a6:	e04c      	b.n	8005a42 <_dtoa_r+0x352>
 80059a8:	2301      	movs	r3, #1
 80059aa:	930a      	str	r3, [sp, #40]	; 0x28
 80059ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ae:	4453      	add	r3, sl
 80059b0:	f103 0901 	add.w	r9, r3, #1
 80059b4:	9302      	str	r3, [sp, #8]
 80059b6:	464b      	mov	r3, r9
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	bfb8      	it	lt
 80059bc:	2301      	movlt	r3, #1
 80059be:	e7ba      	b.n	8005936 <_dtoa_r+0x246>
 80059c0:	2300      	movs	r3, #0
 80059c2:	e7b2      	b.n	800592a <_dtoa_r+0x23a>
 80059c4:	2300      	movs	r3, #0
 80059c6:	e7f0      	b.n	80059aa <_dtoa_r+0x2ba>
 80059c8:	2501      	movs	r5, #1
 80059ca:	2300      	movs	r3, #0
 80059cc:	9306      	str	r3, [sp, #24]
 80059ce:	950a      	str	r5, [sp, #40]	; 0x28
 80059d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	4699      	mov	r9, r3
 80059d8:	2200      	movs	r2, #0
 80059da:	2312      	movs	r3, #18
 80059dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80059de:	e7aa      	b.n	8005936 <_dtoa_r+0x246>
 80059e0:	2301      	movs	r3, #1
 80059e2:	930a      	str	r3, [sp, #40]	; 0x28
 80059e4:	e7f4      	b.n	80059d0 <_dtoa_r+0x2e0>
 80059e6:	2301      	movs	r3, #1
 80059e8:	9302      	str	r3, [sp, #8]
 80059ea:	4699      	mov	r9, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	e7f5      	b.n	80059dc <_dtoa_r+0x2ec>
 80059f0:	3101      	adds	r1, #1
 80059f2:	6071      	str	r1, [r6, #4]
 80059f4:	0052      	lsls	r2, r2, #1
 80059f6:	e7a2      	b.n	800593e <_dtoa_r+0x24e>
 80059f8:	636f4361 	.word	0x636f4361
 80059fc:	3fd287a7 	.word	0x3fd287a7
 8005a00:	8b60c8b3 	.word	0x8b60c8b3
 8005a04:	3fc68a28 	.word	0x3fc68a28
 8005a08:	509f79fb 	.word	0x509f79fb
 8005a0c:	3fd34413 	.word	0x3fd34413
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	08006df9 	.word	0x08006df9
 8005a18:	3ff80000 	.word	0x3ff80000
 8005a1c:	08006e58 	.word	0x08006e58
 8005a20:	08006e30 	.word	0x08006e30
 8005a24:	08006e25 	.word	0x08006e25
 8005a28:	07f1      	lsls	r1, r6, #31
 8005a2a:	d508      	bpl.n	8005a3e <_dtoa_r+0x34e>
 8005a2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a34:	f7fa fde8 	bl	8000608 <__aeabi_dmul>
 8005a38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	1076      	asrs	r6, r6, #1
 8005a40:	3708      	adds	r7, #8
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	d1f0      	bne.n	8005a28 <_dtoa_r+0x338>
 8005a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a4e:	f7fa ff05 	bl	800085c <__aeabi_ddiv>
 8005a52:	e9cd 0100 	strd	r0, r1, [sp]
 8005a56:	e01a      	b.n	8005a8e <_dtoa_r+0x39e>
 8005a58:	2502      	movs	r5, #2
 8005a5a:	e7a3      	b.n	80059a4 <_dtoa_r+0x2b4>
 8005a5c:	f000 80a0 	beq.w	8005ba0 <_dtoa_r+0x4b0>
 8005a60:	f1ca 0600 	rsb	r6, sl, #0
 8005a64:	4b9f      	ldr	r3, [pc, #636]	; (8005ce4 <_dtoa_r+0x5f4>)
 8005a66:	4fa0      	ldr	r7, [pc, #640]	; (8005ce8 <_dtoa_r+0x5f8>)
 8005a68:	f006 020f 	and.w	r2, r6, #15
 8005a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a78:	f7fa fdc6 	bl	8000608 <__aeabi_dmul>
 8005a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8005a80:	1136      	asrs	r6, r6, #4
 8005a82:	2300      	movs	r3, #0
 8005a84:	2502      	movs	r5, #2
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d17f      	bne.n	8005b8a <_dtoa_r+0x49a>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e1      	bne.n	8005a52 <_dtoa_r+0x362>
 8005a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8087 	beq.w	8005ba4 <_dtoa_r+0x4b4>
 8005a96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4b93      	ldr	r3, [pc, #588]	; (8005cec <_dtoa_r+0x5fc>)
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fb f823 	bl	8000aec <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d07c      	beq.n	8005ba4 <_dtoa_r+0x4b4>
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	d079      	beq.n	8005ba4 <_dtoa_r+0x4b4>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd35      	ble.n	8005b22 <_dtoa_r+0x432>
 8005ab6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	4639      	mov	r1, r7
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4b8b      	ldr	r3, [pc, #556]	; (8005cf0 <_dtoa_r+0x600>)
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7fa fda0 	bl	8000608 <__aeabi_dmul>
 8005ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8005acc:	9f02      	ldr	r7, [sp, #8]
 8005ace:	3501      	adds	r5, #1
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f7fa fd2f 	bl	8000534 <__aeabi_i2d>
 8005ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ada:	f7fa fd95 	bl	8000608 <__aeabi_dmul>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4b84      	ldr	r3, [pc, #528]	; (8005cf4 <_dtoa_r+0x604>)
 8005ae2:	f7fa fbdb 	bl	800029c <__adddf3>
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	d15d      	bne.n	8005bac <_dtoa_r+0x4bc>
 8005af0:	2200      	movs	r2, #0
 8005af2:	4b81      	ldr	r3, [pc, #516]	; (8005cf8 <_dtoa_r+0x608>)
 8005af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005af8:	f7fa fbce 	bl	8000298 <__aeabi_dsub>
 8005afc:	462a      	mov	r2, r5
 8005afe:	4633      	mov	r3, r6
 8005b00:	e9cd 0100 	strd	r0, r1, [sp]
 8005b04:	f7fb f810 	bl	8000b28 <__aeabi_dcmpgt>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f040 8288 	bne.w	800601e <_dtoa_r+0x92e>
 8005b0e:	462a      	mov	r2, r5
 8005b10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b18:	f7fa ffe8 	bl	8000aec <__aeabi_dcmplt>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f040 827c 	bne.w	800601a <_dtoa_r+0x92a>
 8005b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b26:	e9cd 2300 	strd	r2, r3, [sp]
 8005b2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f2c0 8150 	blt.w	8005dd2 <_dtoa_r+0x6e2>
 8005b32:	f1ba 0f0e 	cmp.w	sl, #14
 8005b36:	f300 814c 	bgt.w	8005dd2 <_dtoa_r+0x6e2>
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	; (8005ce4 <_dtoa_r+0x5f4>)
 8005b3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b40:	ed93 7b00 	vldr	d7, [r3]
 8005b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b4c:	f280 80d8 	bge.w	8005d00 <_dtoa_r+0x610>
 8005b50:	f1b9 0f00 	cmp.w	r9, #0
 8005b54:	f300 80d4 	bgt.w	8005d00 <_dtoa_r+0x610>
 8005b58:	f040 825e 	bne.w	8006018 <_dtoa_r+0x928>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4b66      	ldr	r3, [pc, #408]	; (8005cf8 <_dtoa_r+0x608>)
 8005b60:	ec51 0b17 	vmov	r0, r1, d7
 8005b64:	f7fa fd50 	bl	8000608 <__aeabi_dmul>
 8005b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6c:	f7fa ffd2 	bl	8000b14 <__aeabi_dcmpge>
 8005b70:	464f      	mov	r7, r9
 8005b72:	464e      	mov	r6, r9
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 8234 	bne.w	8005fe2 <_dtoa_r+0x8f2>
 8005b7a:	2331      	movs	r3, #49	; 0x31
 8005b7c:	f10b 0501 	add.w	r5, fp, #1
 8005b80:	f88b 3000 	strb.w	r3, [fp]
 8005b84:	f10a 0a01 	add.w	sl, sl, #1
 8005b88:	e22f      	b.n	8005fea <_dtoa_r+0x8fa>
 8005b8a:	07f2      	lsls	r2, r6, #31
 8005b8c:	d505      	bpl.n	8005b9a <_dtoa_r+0x4aa>
 8005b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b92:	f7fa fd39 	bl	8000608 <__aeabi_dmul>
 8005b96:	3501      	adds	r5, #1
 8005b98:	2301      	movs	r3, #1
 8005b9a:	1076      	asrs	r6, r6, #1
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	e772      	b.n	8005a86 <_dtoa_r+0x396>
 8005ba0:	2502      	movs	r5, #2
 8005ba2:	e774      	b.n	8005a8e <_dtoa_r+0x39e>
 8005ba4:	f8cd a020 	str.w	sl, [sp, #32]
 8005ba8:	464f      	mov	r7, r9
 8005baa:	e791      	b.n	8005ad0 <_dtoa_r+0x3e0>
 8005bac:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <_dtoa_r+0x5f4>)
 8005bae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d047      	beq.n	8005c4c <_dtoa_r+0x55c>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	494e      	ldr	r1, [pc, #312]	; (8005cfc <_dtoa_r+0x60c>)
 8005bc4:	f7fa fe4a 	bl	800085c <__aeabi_ddiv>
 8005bc8:	462a      	mov	r2, r5
 8005bca:	4633      	mov	r3, r6
 8005bcc:	f7fa fb64 	bl	8000298 <__aeabi_dsub>
 8005bd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005bd4:	465d      	mov	r5, fp
 8005bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bda:	f7fa ffc5 	bl	8000b68 <__aeabi_d2iz>
 8005bde:	4606      	mov	r6, r0
 8005be0:	f7fa fca8 	bl	8000534 <__aeabi_i2d>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bec:	f7fa fb54 	bl	8000298 <__aeabi_dsub>
 8005bf0:	3630      	adds	r6, #48	; 0x30
 8005bf2:	f805 6b01 	strb.w	r6, [r5], #1
 8005bf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8005bfe:	f7fa ff75 	bl	8000aec <__aeabi_dcmplt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d163      	bne.n	8005cce <_dtoa_r+0x5de>
 8005c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	4937      	ldr	r1, [pc, #220]	; (8005cec <_dtoa_r+0x5fc>)
 8005c0e:	f7fa fb43 	bl	8000298 <__aeabi_dsub>
 8005c12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c16:	f7fa ff69 	bl	8000aec <__aeabi_dcmplt>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 80b7 	bne.w	8005d8e <_dtoa_r+0x69e>
 8005c20:	eba5 030b 	sub.w	r3, r5, fp
 8005c24:	429f      	cmp	r7, r3
 8005c26:	f77f af7c 	ble.w	8005b22 <_dtoa_r+0x432>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <_dtoa_r+0x600>)
 8005c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c32:	f7fa fce9 	bl	8000608 <__aeabi_dmul>
 8005c36:	2200      	movs	r2, #0
 8005c38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <_dtoa_r+0x600>)
 8005c3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c42:	f7fa fce1 	bl	8000608 <__aeabi_dmul>
 8005c46:	e9cd 0100 	strd	r0, r1, [sp]
 8005c4a:	e7c4      	b.n	8005bd6 <_dtoa_r+0x4e6>
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4633      	mov	r3, r6
 8005c50:	f7fa fcda 	bl	8000608 <__aeabi_dmul>
 8005c54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c58:	eb0b 0507 	add.w	r5, fp, r7
 8005c5c:	465e      	mov	r6, fp
 8005c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c62:	f7fa ff81 	bl	8000b68 <__aeabi_d2iz>
 8005c66:	4607      	mov	r7, r0
 8005c68:	f7fa fc64 	bl	8000534 <__aeabi_i2d>
 8005c6c:	3730      	adds	r7, #48	; 0x30
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c76:	f7fa fb0f 	bl	8000298 <__aeabi_dsub>
 8005c7a:	f806 7b01 	strb.w	r7, [r6], #1
 8005c7e:	42ae      	cmp	r6, r5
 8005c80:	e9cd 0100 	strd	r0, r1, [sp]
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	d126      	bne.n	8005cd8 <_dtoa_r+0x5e8>
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <_dtoa_r+0x60c>)
 8005c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c90:	f7fa fb04 	bl	800029c <__adddf3>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c9c:	f7fa ff44 	bl	8000b28 <__aeabi_dcmpgt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d174      	bne.n	8005d8e <_dtoa_r+0x69e>
 8005ca4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4914      	ldr	r1, [pc, #80]	; (8005cfc <_dtoa_r+0x60c>)
 8005cac:	f7fa faf4 	bl	8000298 <__aeabi_dsub>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb8:	f7fa ff18 	bl	8000aec <__aeabi_dcmplt>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f43f af30 	beq.w	8005b22 <_dtoa_r+0x432>
 8005cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cc6:	2b30      	cmp	r3, #48	; 0x30
 8005cc8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005ccc:	d002      	beq.n	8005cd4 <_dtoa_r+0x5e4>
 8005cce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005cd2:	e04a      	b.n	8005d6a <_dtoa_r+0x67a>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	e7f4      	b.n	8005cc2 <_dtoa_r+0x5d2>
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <_dtoa_r+0x600>)
 8005cda:	f7fa fc95 	bl	8000608 <__aeabi_dmul>
 8005cde:	e9cd 0100 	strd	r0, r1, [sp]
 8005ce2:	e7bc      	b.n	8005c5e <_dtoa_r+0x56e>
 8005ce4:	08006e58 	.word	0x08006e58
 8005ce8:	08006e30 	.word	0x08006e30
 8005cec:	3ff00000 	.word	0x3ff00000
 8005cf0:	40240000 	.word	0x40240000
 8005cf4:	401c0000 	.word	0x401c0000
 8005cf8:	40140000 	.word	0x40140000
 8005cfc:	3fe00000 	.word	0x3fe00000
 8005d00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d04:	465d      	mov	r5, fp
 8005d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	f7fa fda5 	bl	800085c <__aeabi_ddiv>
 8005d12:	f7fa ff29 	bl	8000b68 <__aeabi_d2iz>
 8005d16:	4680      	mov	r8, r0
 8005d18:	f7fa fc0c 	bl	8000534 <__aeabi_i2d>
 8005d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d20:	f7fa fc72 	bl	8000608 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005d30:	f7fa fab2 	bl	8000298 <__aeabi_dsub>
 8005d34:	f805 6b01 	strb.w	r6, [r5], #1
 8005d38:	eba5 060b 	sub.w	r6, r5, fp
 8005d3c:	45b1      	cmp	r9, r6
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	d139      	bne.n	8005db8 <_dtoa_r+0x6c8>
 8005d44:	f7fa faaa 	bl	800029c <__adddf3>
 8005d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	460f      	mov	r7, r1
 8005d50:	f7fa feea 	bl	8000b28 <__aeabi_dcmpgt>
 8005d54:	b9c8      	cbnz	r0, 8005d8a <_dtoa_r+0x69a>
 8005d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	f7fa febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d62:	b110      	cbz	r0, 8005d6a <_dtoa_r+0x67a>
 8005d64:	f018 0f01 	tst.w	r8, #1
 8005d68:	d10f      	bne.n	8005d8a <_dtoa_r+0x69a>
 8005d6a:	9904      	ldr	r1, [sp, #16]
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fac1 	bl	80062f4 <_Bfree>
 8005d72:	2300      	movs	r3, #0
 8005d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d76:	702b      	strb	r3, [r5, #0]
 8005d78:	f10a 0301 	add.w	r3, sl, #1
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8241 	beq.w	8006208 <_dtoa_r+0xb18>
 8005d86:	601d      	str	r5, [r3, #0]
 8005d88:	e23e      	b.n	8006208 <_dtoa_r+0xb18>
 8005d8a:	f8cd a020 	str.w	sl, [sp, #32]
 8005d8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d92:	2a39      	cmp	r2, #57	; 0x39
 8005d94:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005d98:	d108      	bne.n	8005dac <_dtoa_r+0x6bc>
 8005d9a:	459b      	cmp	fp, r3
 8005d9c:	d10a      	bne.n	8005db4 <_dtoa_r+0x6c4>
 8005d9e:	9b08      	ldr	r3, [sp, #32]
 8005da0:	3301      	adds	r3, #1
 8005da2:	9308      	str	r3, [sp, #32]
 8005da4:	2330      	movs	r3, #48	; 0x30
 8005da6:	f88b 3000 	strb.w	r3, [fp]
 8005daa:	465b      	mov	r3, fp
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	3201      	adds	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e78c      	b.n	8005cce <_dtoa_r+0x5de>
 8005db4:	461d      	mov	r5, r3
 8005db6:	e7ea      	b.n	8005d8e <_dtoa_r+0x69e>
 8005db8:	2200      	movs	r2, #0
 8005dba:	4b9b      	ldr	r3, [pc, #620]	; (8006028 <_dtoa_r+0x938>)
 8005dbc:	f7fa fc24 	bl	8000608 <__aeabi_dmul>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	f7fa fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d09a      	beq.n	8005d06 <_dtoa_r+0x616>
 8005dd0:	e7cb      	b.n	8005d6a <_dtoa_r+0x67a>
 8005dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	f000 808b 	beq.w	8005ef0 <_dtoa_r+0x800>
 8005dda:	9a06      	ldr	r2, [sp, #24]
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	dc6e      	bgt.n	8005ebe <_dtoa_r+0x7ce>
 8005de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d067      	beq.n	8005eb6 <_dtoa_r+0x7c6>
 8005de6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dea:	9f07      	ldr	r7, [sp, #28]
 8005dec:	9d05      	ldr	r5, [sp, #20]
 8005dee:	9a05      	ldr	r2, [sp, #20]
 8005df0:	2101      	movs	r1, #1
 8005df2:	441a      	add	r2, r3
 8005df4:	4620      	mov	r0, r4
 8005df6:	9205      	str	r2, [sp, #20]
 8005df8:	4498      	add	r8, r3
 8005dfa:	f000 fb1b 	bl	8006434 <__i2b>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	dd0c      	ble.n	8005e1e <_dtoa_r+0x72e>
 8005e04:	f1b8 0f00 	cmp.w	r8, #0
 8005e08:	dd09      	ble.n	8005e1e <_dtoa_r+0x72e>
 8005e0a:	4545      	cmp	r5, r8
 8005e0c:	9a05      	ldr	r2, [sp, #20]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	bfa8      	it	ge
 8005e12:	4643      	movge	r3, r8
 8005e14:	1ad2      	subs	r2, r2, r3
 8005e16:	9205      	str	r2, [sp, #20]
 8005e18:	1aed      	subs	r5, r5, r3
 8005e1a:	eba8 0803 	sub.w	r8, r8, r3
 8005e1e:	9b07      	ldr	r3, [sp, #28]
 8005e20:	b1eb      	cbz	r3, 8005e5e <_dtoa_r+0x76e>
 8005e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d067      	beq.n	8005ef8 <_dtoa_r+0x808>
 8005e28:	b18f      	cbz	r7, 8005e4e <_dtoa_r+0x75e>
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	463a      	mov	r2, r7
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fba0 	bl	8006574 <__pow5mult>
 8005e34:	9a04      	ldr	r2, [sp, #16]
 8005e36:	4601      	mov	r1, r0
 8005e38:	4606      	mov	r6, r0
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fb03 	bl	8006446 <__multiply>
 8005e40:	9904      	ldr	r1, [sp, #16]
 8005e42:	9008      	str	r0, [sp, #32]
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fa55 	bl	80062f4 <_Bfree>
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9b07      	ldr	r3, [sp, #28]
 8005e50:	1bda      	subs	r2, r3, r7
 8005e52:	d004      	beq.n	8005e5e <_dtoa_r+0x76e>
 8005e54:	9904      	ldr	r1, [sp, #16]
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fb8c 	bl	8006574 <__pow5mult>
 8005e5c:	9004      	str	r0, [sp, #16]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fae7 	bl	8006434 <__i2b>
 8005e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e68:	4607      	mov	r7, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 81d0 	beq.w	8006210 <_dtoa_r+0xb20>
 8005e70:	461a      	mov	r2, r3
 8005e72:	4601      	mov	r1, r0
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fb7d 	bl	8006574 <__pow5mult>
 8005e7a:	9b06      	ldr	r3, [sp, #24]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	4607      	mov	r7, r0
 8005e80:	dc40      	bgt.n	8005f04 <_dtoa_r+0x814>
 8005e82:	9b00      	ldr	r3, [sp, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d139      	bne.n	8005efc <_dtoa_r+0x80c>
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d136      	bne.n	8005f00 <_dtoa_r+0x810>
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e98:	0d1b      	lsrs	r3, r3, #20
 8005e9a:	051b      	lsls	r3, r3, #20
 8005e9c:	b12b      	cbz	r3, 8005eaa <_dtoa_r+0x7ba>
 8005e9e:	9b05      	ldr	r3, [sp, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	f108 0801 	add.w	r8, r8, #1
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	9307      	str	r3, [sp, #28]
 8005eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d12a      	bne.n	8005f08 <_dtoa_r+0x818>
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	e030      	b.n	8005f18 <_dtoa_r+0x828>
 8005eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ebc:	e795      	b.n	8005dea <_dtoa_r+0x6fa>
 8005ebe:	9b07      	ldr	r3, [sp, #28]
 8005ec0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005ec4:	42bb      	cmp	r3, r7
 8005ec6:	bfbf      	itttt	lt
 8005ec8:	9b07      	ldrlt	r3, [sp, #28]
 8005eca:	9707      	strlt	r7, [sp, #28]
 8005ecc:	1afa      	sublt	r2, r7, r3
 8005ece:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ed0:	bfbb      	ittet	lt
 8005ed2:	189b      	addlt	r3, r3, r2
 8005ed4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ed6:	1bdf      	subge	r7, r3, r7
 8005ed8:	2700      	movlt	r7, #0
 8005eda:	f1b9 0f00 	cmp.w	r9, #0
 8005ede:	bfb5      	itete	lt
 8005ee0:	9b05      	ldrlt	r3, [sp, #20]
 8005ee2:	9d05      	ldrge	r5, [sp, #20]
 8005ee4:	eba3 0509 	sublt.w	r5, r3, r9
 8005ee8:	464b      	movge	r3, r9
 8005eea:	bfb8      	it	lt
 8005eec:	2300      	movlt	r3, #0
 8005eee:	e77e      	b.n	8005dee <_dtoa_r+0x6fe>
 8005ef0:	9f07      	ldr	r7, [sp, #28]
 8005ef2:	9d05      	ldr	r5, [sp, #20]
 8005ef4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ef6:	e783      	b.n	8005e00 <_dtoa_r+0x710>
 8005ef8:	9a07      	ldr	r2, [sp, #28]
 8005efa:	e7ab      	b.n	8005e54 <_dtoa_r+0x764>
 8005efc:	2300      	movs	r3, #0
 8005efe:	e7d4      	b.n	8005eaa <_dtoa_r+0x7ba>
 8005f00:	9b00      	ldr	r3, [sp, #0]
 8005f02:	e7d2      	b.n	8005eaa <_dtoa_r+0x7ba>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9307      	str	r3, [sp, #28]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005f0e:	6918      	ldr	r0, [r3, #16]
 8005f10:	f000 fa42 	bl	8006398 <__hi0bits>
 8005f14:	f1c0 0020 	rsb	r0, r0, #32
 8005f18:	4440      	add	r0, r8
 8005f1a:	f010 001f 	ands.w	r0, r0, #31
 8005f1e:	d047      	beq.n	8005fb0 <_dtoa_r+0x8c0>
 8005f20:	f1c0 0320 	rsb	r3, r0, #32
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	dd3b      	ble.n	8005fa0 <_dtoa_r+0x8b0>
 8005f28:	9b05      	ldr	r3, [sp, #20]
 8005f2a:	f1c0 001c 	rsb	r0, r0, #28
 8005f2e:	4403      	add	r3, r0
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	4405      	add	r5, r0
 8005f34:	4480      	add	r8, r0
 8005f36:	9b05      	ldr	r3, [sp, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dd05      	ble.n	8005f48 <_dtoa_r+0x858>
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	9904      	ldr	r1, [sp, #16]
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fb65 	bl	8006610 <__lshift>
 8005f46:	9004      	str	r0, [sp, #16]
 8005f48:	f1b8 0f00 	cmp.w	r8, #0
 8005f4c:	dd05      	ble.n	8005f5a <_dtoa_r+0x86a>
 8005f4e:	4639      	mov	r1, r7
 8005f50:	4642      	mov	r2, r8
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fb5c 	bl	8006610 <__lshift>
 8005f58:	4607      	mov	r7, r0
 8005f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f5c:	b353      	cbz	r3, 8005fb4 <_dtoa_r+0x8c4>
 8005f5e:	4639      	mov	r1, r7
 8005f60:	9804      	ldr	r0, [sp, #16]
 8005f62:	f000 fba9 	bl	80066b8 <__mcmp>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	da24      	bge.n	8005fb4 <_dtoa_r+0x8c4>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	220a      	movs	r2, #10
 8005f6e:	9904      	ldr	r1, [sp, #16]
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 f9d6 	bl	8006322 <__multadd>
 8005f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f78:	9004      	str	r0, [sp, #16]
 8005f7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 814d 	beq.w	800621e <_dtoa_r+0xb2e>
 8005f84:	2300      	movs	r3, #0
 8005f86:	4631      	mov	r1, r6
 8005f88:	220a      	movs	r2, #10
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 f9c9 	bl	8006322 <__multadd>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	4606      	mov	r6, r0
 8005f96:	dc4f      	bgt.n	8006038 <_dtoa_r+0x948>
 8005f98:	9b06      	ldr	r3, [sp, #24]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	dd4c      	ble.n	8006038 <_dtoa_r+0x948>
 8005f9e:	e011      	b.n	8005fc4 <_dtoa_r+0x8d4>
 8005fa0:	d0c9      	beq.n	8005f36 <_dtoa_r+0x846>
 8005fa2:	9a05      	ldr	r2, [sp, #20]
 8005fa4:	331c      	adds	r3, #28
 8005fa6:	441a      	add	r2, r3
 8005fa8:	9205      	str	r2, [sp, #20]
 8005faa:	441d      	add	r5, r3
 8005fac:	4498      	add	r8, r3
 8005fae:	e7c2      	b.n	8005f36 <_dtoa_r+0x846>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	e7f6      	b.n	8005fa2 <_dtoa_r+0x8b2>
 8005fb4:	f1b9 0f00 	cmp.w	r9, #0
 8005fb8:	dc38      	bgt.n	800602c <_dtoa_r+0x93c>
 8005fba:	9b06      	ldr	r3, [sp, #24]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	dd35      	ble.n	800602c <_dtoa_r+0x93c>
 8005fc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005fc4:	9b02      	ldr	r3, [sp, #8]
 8005fc6:	b963      	cbnz	r3, 8005fe2 <_dtoa_r+0x8f2>
 8005fc8:	4639      	mov	r1, r7
 8005fca:	2205      	movs	r2, #5
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 f9a8 	bl	8006322 <__multadd>
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	9804      	ldr	r0, [sp, #16]
 8005fd8:	f000 fb6e 	bl	80066b8 <__mcmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f73f adcc 	bgt.w	8005b7a <_dtoa_r+0x48a>
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe4:	465d      	mov	r5, fp
 8005fe6:	ea6f 0a03 	mvn.w	sl, r3
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 f97f 	bl	80062f4 <_Bfree>
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	f43f aeb7 	beq.w	8005d6a <_dtoa_r+0x67a>
 8005ffc:	f1b9 0f00 	cmp.w	r9, #0
 8006000:	d005      	beq.n	800600e <_dtoa_r+0x91e>
 8006002:	45b1      	cmp	r9, r6
 8006004:	d003      	beq.n	800600e <_dtoa_r+0x91e>
 8006006:	4649      	mov	r1, r9
 8006008:	4620      	mov	r0, r4
 800600a:	f000 f973 	bl	80062f4 <_Bfree>
 800600e:	4631      	mov	r1, r6
 8006010:	4620      	mov	r0, r4
 8006012:	f000 f96f 	bl	80062f4 <_Bfree>
 8006016:	e6a8      	b.n	8005d6a <_dtoa_r+0x67a>
 8006018:	2700      	movs	r7, #0
 800601a:	463e      	mov	r6, r7
 800601c:	e7e1      	b.n	8005fe2 <_dtoa_r+0x8f2>
 800601e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006022:	463e      	mov	r6, r7
 8006024:	e5a9      	b.n	8005b7a <_dtoa_r+0x48a>
 8006026:	bf00      	nop
 8006028:	40240000 	.word	0x40240000
 800602c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80fa 	beq.w	800622c <_dtoa_r+0xb3c>
 8006038:	2d00      	cmp	r5, #0
 800603a:	dd05      	ble.n	8006048 <_dtoa_r+0x958>
 800603c:	4631      	mov	r1, r6
 800603e:	462a      	mov	r2, r5
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fae5 	bl	8006610 <__lshift>
 8006046:	4606      	mov	r6, r0
 8006048:	9b07      	ldr	r3, [sp, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d04c      	beq.n	80060e8 <_dtoa_r+0x9f8>
 800604e:	6871      	ldr	r1, [r6, #4]
 8006050:	4620      	mov	r0, r4
 8006052:	f000 f91b 	bl	800628c <_Balloc>
 8006056:	6932      	ldr	r2, [r6, #16]
 8006058:	3202      	adds	r2, #2
 800605a:	4605      	mov	r5, r0
 800605c:	0092      	lsls	r2, r2, #2
 800605e:	f106 010c 	add.w	r1, r6, #12
 8006062:	300c      	adds	r0, #12
 8006064:	f7fe fe28 	bl	8004cb8 <memcpy>
 8006068:	2201      	movs	r2, #1
 800606a:	4629      	mov	r1, r5
 800606c:	4620      	mov	r0, r4
 800606e:	f000 facf 	bl	8006610 <__lshift>
 8006072:	9b00      	ldr	r3, [sp, #0]
 8006074:	f8cd b014 	str.w	fp, [sp, #20]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	46b1      	mov	r9, r6
 800607e:	9307      	str	r3, [sp, #28]
 8006080:	4606      	mov	r6, r0
 8006082:	4639      	mov	r1, r7
 8006084:	9804      	ldr	r0, [sp, #16]
 8006086:	f7ff faa7 	bl	80055d8 <quorem>
 800608a:	4649      	mov	r1, r9
 800608c:	4605      	mov	r5, r0
 800608e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006092:	9804      	ldr	r0, [sp, #16]
 8006094:	f000 fb10 	bl	80066b8 <__mcmp>
 8006098:	4632      	mov	r2, r6
 800609a:	9000      	str	r0, [sp, #0]
 800609c:	4639      	mov	r1, r7
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fb24 	bl	80066ec <__mdiff>
 80060a4:	68c3      	ldr	r3, [r0, #12]
 80060a6:	4602      	mov	r2, r0
 80060a8:	bb03      	cbnz	r3, 80060ec <_dtoa_r+0x9fc>
 80060aa:	4601      	mov	r1, r0
 80060ac:	9008      	str	r0, [sp, #32]
 80060ae:	9804      	ldr	r0, [sp, #16]
 80060b0:	f000 fb02 	bl	80066b8 <__mcmp>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	4603      	mov	r3, r0
 80060b8:	4611      	mov	r1, r2
 80060ba:	4620      	mov	r0, r4
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	f000 f919 	bl	80062f4 <_Bfree>
 80060c2:	9b08      	ldr	r3, [sp, #32]
 80060c4:	b9a3      	cbnz	r3, 80060f0 <_dtoa_r+0xa00>
 80060c6:	9a06      	ldr	r2, [sp, #24]
 80060c8:	b992      	cbnz	r2, 80060f0 <_dtoa_r+0xa00>
 80060ca:	9a07      	ldr	r2, [sp, #28]
 80060cc:	b982      	cbnz	r2, 80060f0 <_dtoa_r+0xa00>
 80060ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060d2:	d029      	beq.n	8006128 <_dtoa_r+0xa38>
 80060d4:	9b00      	ldr	r3, [sp, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd01      	ble.n	80060de <_dtoa_r+0x9ee>
 80060da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80060de:	9b05      	ldr	r3, [sp, #20]
 80060e0:	1c5d      	adds	r5, r3, #1
 80060e2:	f883 8000 	strb.w	r8, [r3]
 80060e6:	e782      	b.n	8005fee <_dtoa_r+0x8fe>
 80060e8:	4630      	mov	r0, r6
 80060ea:	e7c2      	b.n	8006072 <_dtoa_r+0x982>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e7e3      	b.n	80060b8 <_dtoa_r+0x9c8>
 80060f0:	9a00      	ldr	r2, [sp, #0]
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	db04      	blt.n	8006100 <_dtoa_r+0xa10>
 80060f6:	d125      	bne.n	8006144 <_dtoa_r+0xa54>
 80060f8:	9a06      	ldr	r2, [sp, #24]
 80060fa:	bb1a      	cbnz	r2, 8006144 <_dtoa_r+0xa54>
 80060fc:	9a07      	ldr	r2, [sp, #28]
 80060fe:	bb0a      	cbnz	r2, 8006144 <_dtoa_r+0xa54>
 8006100:	2b00      	cmp	r3, #0
 8006102:	ddec      	ble.n	80060de <_dtoa_r+0x9ee>
 8006104:	2201      	movs	r2, #1
 8006106:	9904      	ldr	r1, [sp, #16]
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fa81 	bl	8006610 <__lshift>
 800610e:	4639      	mov	r1, r7
 8006110:	9004      	str	r0, [sp, #16]
 8006112:	f000 fad1 	bl	80066b8 <__mcmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	dc03      	bgt.n	8006122 <_dtoa_r+0xa32>
 800611a:	d1e0      	bne.n	80060de <_dtoa_r+0x9ee>
 800611c:	f018 0f01 	tst.w	r8, #1
 8006120:	d0dd      	beq.n	80060de <_dtoa_r+0x9ee>
 8006122:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006126:	d1d8      	bne.n	80060da <_dtoa_r+0x9ea>
 8006128:	9b05      	ldr	r3, [sp, #20]
 800612a:	9a05      	ldr	r2, [sp, #20]
 800612c:	1c5d      	adds	r5, r3, #1
 800612e:	2339      	movs	r3, #57	; 0x39
 8006130:	7013      	strb	r3, [r2, #0]
 8006132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006136:	2b39      	cmp	r3, #57	; 0x39
 8006138:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800613c:	d04f      	beq.n	80061de <_dtoa_r+0xaee>
 800613e:	3301      	adds	r3, #1
 8006140:	7013      	strb	r3, [r2, #0]
 8006142:	e754      	b.n	8005fee <_dtoa_r+0x8fe>
 8006144:	9a05      	ldr	r2, [sp, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f102 0501 	add.w	r5, r2, #1
 800614c:	dd06      	ble.n	800615c <_dtoa_r+0xa6c>
 800614e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006152:	d0e9      	beq.n	8006128 <_dtoa_r+0xa38>
 8006154:	f108 0801 	add.w	r8, r8, #1
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	e7c2      	b.n	80060e2 <_dtoa_r+0x9f2>
 800615c:	9a02      	ldr	r2, [sp, #8]
 800615e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006162:	eba5 030b 	sub.w	r3, r5, fp
 8006166:	4293      	cmp	r3, r2
 8006168:	d021      	beq.n	80061ae <_dtoa_r+0xabe>
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	9904      	ldr	r1, [sp, #16]
 8006170:	4620      	mov	r0, r4
 8006172:	f000 f8d6 	bl	8006322 <__multadd>
 8006176:	45b1      	cmp	r9, r6
 8006178:	9004      	str	r0, [sp, #16]
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	f04f 020a 	mov.w	r2, #10
 8006182:	4649      	mov	r1, r9
 8006184:	4620      	mov	r0, r4
 8006186:	d105      	bne.n	8006194 <_dtoa_r+0xaa4>
 8006188:	f000 f8cb 	bl	8006322 <__multadd>
 800618c:	4681      	mov	r9, r0
 800618e:	4606      	mov	r6, r0
 8006190:	9505      	str	r5, [sp, #20]
 8006192:	e776      	b.n	8006082 <_dtoa_r+0x992>
 8006194:	f000 f8c5 	bl	8006322 <__multadd>
 8006198:	4631      	mov	r1, r6
 800619a:	4681      	mov	r9, r0
 800619c:	2300      	movs	r3, #0
 800619e:	220a      	movs	r2, #10
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 f8be 	bl	8006322 <__multadd>
 80061a6:	4606      	mov	r6, r0
 80061a8:	e7f2      	b.n	8006190 <_dtoa_r+0xaa0>
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	2201      	movs	r2, #1
 80061b0:	9904      	ldr	r1, [sp, #16]
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fa2c 	bl	8006610 <__lshift>
 80061b8:	4639      	mov	r1, r7
 80061ba:	9004      	str	r0, [sp, #16]
 80061bc:	f000 fa7c 	bl	80066b8 <__mcmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	dcb6      	bgt.n	8006132 <_dtoa_r+0xa42>
 80061c4:	d102      	bne.n	80061cc <_dtoa_r+0xadc>
 80061c6:	f018 0f01 	tst.w	r8, #1
 80061ca:	d1b2      	bne.n	8006132 <_dtoa_r+0xa42>
 80061cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061d0:	2b30      	cmp	r3, #48	; 0x30
 80061d2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80061d6:	f47f af0a 	bne.w	8005fee <_dtoa_r+0x8fe>
 80061da:	4615      	mov	r5, r2
 80061dc:	e7f6      	b.n	80061cc <_dtoa_r+0xadc>
 80061de:	4593      	cmp	fp, r2
 80061e0:	d105      	bne.n	80061ee <_dtoa_r+0xafe>
 80061e2:	2331      	movs	r3, #49	; 0x31
 80061e4:	f10a 0a01 	add.w	sl, sl, #1
 80061e8:	f88b 3000 	strb.w	r3, [fp]
 80061ec:	e6ff      	b.n	8005fee <_dtoa_r+0x8fe>
 80061ee:	4615      	mov	r5, r2
 80061f0:	e79f      	b.n	8006132 <_dtoa_r+0xa42>
 80061f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006258 <_dtoa_r+0xb68>
 80061f6:	e007      	b.n	8006208 <_dtoa_r+0xb18>
 80061f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800625c <_dtoa_r+0xb6c>
 80061fe:	b11b      	cbz	r3, 8006208 <_dtoa_r+0xb18>
 8006200:	f10b 0308 	add.w	r3, fp, #8
 8006204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4658      	mov	r0, fp
 800620a:	b017      	add	sp, #92	; 0x5c
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	9b06      	ldr	r3, [sp, #24]
 8006212:	2b01      	cmp	r3, #1
 8006214:	f77f ae35 	ble.w	8005e82 <_dtoa_r+0x792>
 8006218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800621a:	9307      	str	r3, [sp, #28]
 800621c:	e649      	b.n	8005eb2 <_dtoa_r+0x7c2>
 800621e:	9b02      	ldr	r3, [sp, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dc03      	bgt.n	800622c <_dtoa_r+0xb3c>
 8006224:	9b06      	ldr	r3, [sp, #24]
 8006226:	2b02      	cmp	r3, #2
 8006228:	f73f aecc 	bgt.w	8005fc4 <_dtoa_r+0x8d4>
 800622c:	465d      	mov	r5, fp
 800622e:	4639      	mov	r1, r7
 8006230:	9804      	ldr	r0, [sp, #16]
 8006232:	f7ff f9d1 	bl	80055d8 <quorem>
 8006236:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800623a:	f805 8b01 	strb.w	r8, [r5], #1
 800623e:	9a02      	ldr	r2, [sp, #8]
 8006240:	eba5 030b 	sub.w	r3, r5, fp
 8006244:	429a      	cmp	r2, r3
 8006246:	ddb0      	ble.n	80061aa <_dtoa_r+0xaba>
 8006248:	2300      	movs	r3, #0
 800624a:	220a      	movs	r2, #10
 800624c:	9904      	ldr	r1, [sp, #16]
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f867 	bl	8006322 <__multadd>
 8006254:	9004      	str	r0, [sp, #16]
 8006256:	e7ea      	b.n	800622e <_dtoa_r+0xb3e>
 8006258:	08006df8 	.word	0x08006df8
 800625c:	08006e1c 	.word	0x08006e1c

08006260 <_localeconv_r>:
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <_localeconv_r+0x14>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a18      	ldr	r0, [r3, #32]
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <_localeconv_r+0x18>)
 8006268:	2800      	cmp	r0, #0
 800626a:	bf08      	it	eq
 800626c:	4618      	moveq	r0, r3
 800626e:	30f0      	adds	r0, #240	; 0xf0
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c
 8006278:	20000070 	.word	0x20000070

0800627c <malloc>:
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <malloc+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 bb3b 	b.w	80068fc <_malloc_r>
 8006286:	bf00      	nop
 8006288:	2000000c 	.word	0x2000000c

0800628c <_Balloc>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006290:	4604      	mov	r4, r0
 8006292:	460e      	mov	r6, r1
 8006294:	b93d      	cbnz	r5, 80062a6 <_Balloc+0x1a>
 8006296:	2010      	movs	r0, #16
 8006298:	f7ff fff0 	bl	800627c <malloc>
 800629c:	6260      	str	r0, [r4, #36]	; 0x24
 800629e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062a2:	6005      	str	r5, [r0, #0]
 80062a4:	60c5      	str	r5, [r0, #12]
 80062a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80062a8:	68eb      	ldr	r3, [r5, #12]
 80062aa:	b183      	cbz	r3, 80062ce <_Balloc+0x42>
 80062ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80062b4:	b9b8      	cbnz	r0, 80062e6 <_Balloc+0x5a>
 80062b6:	2101      	movs	r1, #1
 80062b8:	fa01 f506 	lsl.w	r5, r1, r6
 80062bc:	1d6a      	adds	r2, r5, #5
 80062be:	0092      	lsls	r2, r2, #2
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 fabf 	bl	8006844 <_calloc_r>
 80062c6:	b160      	cbz	r0, 80062e2 <_Balloc+0x56>
 80062c8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80062cc:	e00e      	b.n	80062ec <_Balloc+0x60>
 80062ce:	2221      	movs	r2, #33	; 0x21
 80062d0:	2104      	movs	r1, #4
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fab6 	bl	8006844 <_calloc_r>
 80062d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062da:	60e8      	str	r0, [r5, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e4      	bne.n	80062ac <_Balloc+0x20>
 80062e2:	2000      	movs	r0, #0
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	6802      	ldr	r2, [r0, #0]
 80062e8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80062ec:	2300      	movs	r3, #0
 80062ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f2:	e7f7      	b.n	80062e4 <_Balloc+0x58>

080062f4 <_Bfree>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062f8:	4606      	mov	r6, r0
 80062fa:	460d      	mov	r5, r1
 80062fc:	b93c      	cbnz	r4, 800630e <_Bfree+0x1a>
 80062fe:	2010      	movs	r0, #16
 8006300:	f7ff ffbc 	bl	800627c <malloc>
 8006304:	6270      	str	r0, [r6, #36]	; 0x24
 8006306:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800630a:	6004      	str	r4, [r0, #0]
 800630c:	60c4      	str	r4, [r0, #12]
 800630e:	b13d      	cbz	r5, 8006320 <_Bfree+0x2c>
 8006310:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006312:	686a      	ldr	r2, [r5, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800631a:	6029      	str	r1, [r5, #0]
 800631c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006320:	bd70      	pop	{r4, r5, r6, pc}

08006322 <__multadd>:
 8006322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	690d      	ldr	r5, [r1, #16]
 8006328:	461f      	mov	r7, r3
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	f101 0c14 	add.w	ip, r1, #20
 8006332:	2300      	movs	r3, #0
 8006334:	f8dc 0000 	ldr.w	r0, [ip]
 8006338:	b281      	uxth	r1, r0
 800633a:	fb02 7101 	mla	r1, r2, r1, r7
 800633e:	0c0f      	lsrs	r7, r1, #16
 8006340:	0c00      	lsrs	r0, r0, #16
 8006342:	fb02 7000 	mla	r0, r2, r0, r7
 8006346:	b289      	uxth	r1, r1
 8006348:	3301      	adds	r3, #1
 800634a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800634e:	429d      	cmp	r5, r3
 8006350:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006354:	f84c 1b04 	str.w	r1, [ip], #4
 8006358:	dcec      	bgt.n	8006334 <__multadd+0x12>
 800635a:	b1d7      	cbz	r7, 8006392 <__multadd+0x70>
 800635c:	68a3      	ldr	r3, [r4, #8]
 800635e:	42ab      	cmp	r3, r5
 8006360:	dc12      	bgt.n	8006388 <__multadd+0x66>
 8006362:	6861      	ldr	r1, [r4, #4]
 8006364:	4630      	mov	r0, r6
 8006366:	3101      	adds	r1, #1
 8006368:	f7ff ff90 	bl	800628c <_Balloc>
 800636c:	6922      	ldr	r2, [r4, #16]
 800636e:	3202      	adds	r2, #2
 8006370:	f104 010c 	add.w	r1, r4, #12
 8006374:	4680      	mov	r8, r0
 8006376:	0092      	lsls	r2, r2, #2
 8006378:	300c      	adds	r0, #12
 800637a:	f7fe fc9d 	bl	8004cb8 <memcpy>
 800637e:	4621      	mov	r1, r4
 8006380:	4630      	mov	r0, r6
 8006382:	f7ff ffb7 	bl	80062f4 <_Bfree>
 8006386:	4644      	mov	r4, r8
 8006388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800638c:	3501      	adds	r5, #1
 800638e:	615f      	str	r7, [r3, #20]
 8006390:	6125      	str	r5, [r4, #16]
 8006392:	4620      	mov	r0, r4
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006398 <__hi0bits>:
 8006398:	0c02      	lsrs	r2, r0, #16
 800639a:	0412      	lsls	r2, r2, #16
 800639c:	4603      	mov	r3, r0
 800639e:	b9b2      	cbnz	r2, 80063ce <__hi0bits+0x36>
 80063a0:	0403      	lsls	r3, r0, #16
 80063a2:	2010      	movs	r0, #16
 80063a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063a8:	bf04      	itt	eq
 80063aa:	021b      	lsleq	r3, r3, #8
 80063ac:	3008      	addeq	r0, #8
 80063ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063b2:	bf04      	itt	eq
 80063b4:	011b      	lsleq	r3, r3, #4
 80063b6:	3004      	addeq	r0, #4
 80063b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063bc:	bf04      	itt	eq
 80063be:	009b      	lsleq	r3, r3, #2
 80063c0:	3002      	addeq	r0, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	db06      	blt.n	80063d4 <__hi0bits+0x3c>
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	d503      	bpl.n	80063d2 <__hi0bits+0x3a>
 80063ca:	3001      	adds	r0, #1
 80063cc:	4770      	bx	lr
 80063ce:	2000      	movs	r0, #0
 80063d0:	e7e8      	b.n	80063a4 <__hi0bits+0xc>
 80063d2:	2020      	movs	r0, #32
 80063d4:	4770      	bx	lr

080063d6 <__lo0bits>:
 80063d6:	6803      	ldr	r3, [r0, #0]
 80063d8:	f013 0207 	ands.w	r2, r3, #7
 80063dc:	4601      	mov	r1, r0
 80063de:	d00b      	beq.n	80063f8 <__lo0bits+0x22>
 80063e0:	07da      	lsls	r2, r3, #31
 80063e2:	d423      	bmi.n	800642c <__lo0bits+0x56>
 80063e4:	0798      	lsls	r0, r3, #30
 80063e6:	bf49      	itett	mi
 80063e8:	085b      	lsrmi	r3, r3, #1
 80063ea:	089b      	lsrpl	r3, r3, #2
 80063ec:	2001      	movmi	r0, #1
 80063ee:	600b      	strmi	r3, [r1, #0]
 80063f0:	bf5c      	itt	pl
 80063f2:	600b      	strpl	r3, [r1, #0]
 80063f4:	2002      	movpl	r0, #2
 80063f6:	4770      	bx	lr
 80063f8:	b298      	uxth	r0, r3
 80063fa:	b9a8      	cbnz	r0, 8006428 <__lo0bits+0x52>
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	2010      	movs	r0, #16
 8006400:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006404:	bf04      	itt	eq
 8006406:	0a1b      	lsreq	r3, r3, #8
 8006408:	3008      	addeq	r0, #8
 800640a:	071a      	lsls	r2, r3, #28
 800640c:	bf04      	itt	eq
 800640e:	091b      	lsreq	r3, r3, #4
 8006410:	3004      	addeq	r0, #4
 8006412:	079a      	lsls	r2, r3, #30
 8006414:	bf04      	itt	eq
 8006416:	089b      	lsreq	r3, r3, #2
 8006418:	3002      	addeq	r0, #2
 800641a:	07da      	lsls	r2, r3, #31
 800641c:	d402      	bmi.n	8006424 <__lo0bits+0x4e>
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	d006      	beq.n	8006430 <__lo0bits+0x5a>
 8006422:	3001      	adds	r0, #1
 8006424:	600b      	str	r3, [r1, #0]
 8006426:	4770      	bx	lr
 8006428:	4610      	mov	r0, r2
 800642a:	e7e9      	b.n	8006400 <__lo0bits+0x2a>
 800642c:	2000      	movs	r0, #0
 800642e:	4770      	bx	lr
 8006430:	2020      	movs	r0, #32
 8006432:	4770      	bx	lr

08006434 <__i2b>:
 8006434:	b510      	push	{r4, lr}
 8006436:	460c      	mov	r4, r1
 8006438:	2101      	movs	r1, #1
 800643a:	f7ff ff27 	bl	800628c <_Balloc>
 800643e:	2201      	movs	r2, #1
 8006440:	6144      	str	r4, [r0, #20]
 8006442:	6102      	str	r2, [r0, #16]
 8006444:	bd10      	pop	{r4, pc}

08006446 <__multiply>:
 8006446:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	4614      	mov	r4, r2
 800644c:	690a      	ldr	r2, [r1, #16]
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	bfb8      	it	lt
 8006454:	460b      	movlt	r3, r1
 8006456:	4688      	mov	r8, r1
 8006458:	bfbc      	itt	lt
 800645a:	46a0      	movlt	r8, r4
 800645c:	461c      	movlt	r4, r3
 800645e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006462:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800646a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800646e:	eb07 0609 	add.w	r6, r7, r9
 8006472:	42b3      	cmp	r3, r6
 8006474:	bfb8      	it	lt
 8006476:	3101      	addlt	r1, #1
 8006478:	f7ff ff08 	bl	800628c <_Balloc>
 800647c:	f100 0514 	add.w	r5, r0, #20
 8006480:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006484:	462b      	mov	r3, r5
 8006486:	2200      	movs	r2, #0
 8006488:	4573      	cmp	r3, lr
 800648a:	d316      	bcc.n	80064ba <__multiply+0x74>
 800648c:	f104 0214 	add.w	r2, r4, #20
 8006490:	f108 0114 	add.w	r1, r8, #20
 8006494:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006498:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	9201      	str	r2, [sp, #4]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d80c      	bhi.n	80064c0 <__multiply+0x7a>
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	dd03      	ble.n	80064b2 <__multiply+0x6c>
 80064aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d05d      	beq.n	800656e <__multiply+0x128>
 80064b2:	6106      	str	r6, [r0, #16]
 80064b4:	b003      	add	sp, #12
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	f843 2b04 	str.w	r2, [r3], #4
 80064be:	e7e3      	b.n	8006488 <__multiply+0x42>
 80064c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	d023      	beq.n	8006512 <__multiply+0xcc>
 80064ca:	4689      	mov	r9, r1
 80064cc:	46ac      	mov	ip, r5
 80064ce:	f04f 0800 	mov.w	r8, #0
 80064d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	b2a3      	uxth	r3, r4
 80064dc:	fa1f fa8a 	uxth.w	sl, sl
 80064e0:	fb0b a303 	mla	r3, fp, r3, sl
 80064e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064e8:	f8dc 4000 	ldr.w	r4, [ip]
 80064ec:	4443      	add	r3, r8
 80064ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80064f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80064f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80064fa:	46e2      	mov	sl, ip
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006502:	454f      	cmp	r7, r9
 8006504:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006508:	f84a 3b04 	str.w	r3, [sl], #4
 800650c:	d82b      	bhi.n	8006566 <__multiply+0x120>
 800650e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006518:	3204      	adds	r2, #4
 800651a:	f1ba 0f00 	cmp.w	sl, #0
 800651e:	d020      	beq.n	8006562 <__multiply+0x11c>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	4689      	mov	r9, r1
 8006524:	46a8      	mov	r8, r5
 8006526:	f04f 0b00 	mov.w	fp, #0
 800652a:	f8b9 c000 	ldrh.w	ip, [r9]
 800652e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006532:	fb0a 440c 	mla	r4, sl, ip, r4
 8006536:	445c      	add	r4, fp
 8006538:	46c4      	mov	ip, r8
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006540:	f84c 3b04 	str.w	r3, [ip], #4
 8006544:	f859 3b04 	ldr.w	r3, [r9], #4
 8006548:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	fb0a b303 	mla	r3, sl, r3, fp
 8006552:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006556:	454f      	cmp	r7, r9
 8006558:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800655c:	d805      	bhi.n	800656a <__multiply+0x124>
 800655e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006562:	3504      	adds	r5, #4
 8006564:	e79b      	b.n	800649e <__multiply+0x58>
 8006566:	46d4      	mov	ip, sl
 8006568:	e7b3      	b.n	80064d2 <__multiply+0x8c>
 800656a:	46e0      	mov	r8, ip
 800656c:	e7dd      	b.n	800652a <__multiply+0xe4>
 800656e:	3e01      	subs	r6, #1
 8006570:	e799      	b.n	80064a6 <__multiply+0x60>
	...

08006574 <__pow5mult>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4615      	mov	r5, r2
 800657a:	f012 0203 	ands.w	r2, r2, #3
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	d007      	beq.n	8006594 <__pow5mult+0x20>
 8006584:	3a01      	subs	r2, #1
 8006586:	4c21      	ldr	r4, [pc, #132]	; (800660c <__pow5mult+0x98>)
 8006588:	2300      	movs	r3, #0
 800658a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800658e:	f7ff fec8 	bl	8006322 <__multadd>
 8006592:	4607      	mov	r7, r0
 8006594:	10ad      	asrs	r5, r5, #2
 8006596:	d035      	beq.n	8006604 <__pow5mult+0x90>
 8006598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659a:	b93c      	cbnz	r4, 80065ac <__pow5mult+0x38>
 800659c:	2010      	movs	r0, #16
 800659e:	f7ff fe6d 	bl	800627c <malloc>
 80065a2:	6270      	str	r0, [r6, #36]	; 0x24
 80065a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065a8:	6004      	str	r4, [r0, #0]
 80065aa:	60c4      	str	r4, [r0, #12]
 80065ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065b4:	b94c      	cbnz	r4, 80065ca <__pow5mult+0x56>
 80065b6:	f240 2171 	movw	r1, #625	; 0x271
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ff3a 	bl	8006434 <__i2b>
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80065c6:	4604      	mov	r4, r0
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	f04f 0800 	mov.w	r8, #0
 80065ce:	07eb      	lsls	r3, r5, #31
 80065d0:	d50a      	bpl.n	80065e8 <__pow5mult+0x74>
 80065d2:	4639      	mov	r1, r7
 80065d4:	4622      	mov	r2, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff ff35 	bl	8006446 <__multiply>
 80065dc:	4639      	mov	r1, r7
 80065de:	4681      	mov	r9, r0
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff fe87 	bl	80062f4 <_Bfree>
 80065e6:	464f      	mov	r7, r9
 80065e8:	106d      	asrs	r5, r5, #1
 80065ea:	d00b      	beq.n	8006604 <__pow5mult+0x90>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	b938      	cbnz	r0, 8006600 <__pow5mult+0x8c>
 80065f0:	4622      	mov	r2, r4
 80065f2:	4621      	mov	r1, r4
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff ff26 	bl	8006446 <__multiply>
 80065fa:	6020      	str	r0, [r4, #0]
 80065fc:	f8c0 8000 	str.w	r8, [r0]
 8006600:	4604      	mov	r4, r0
 8006602:	e7e4      	b.n	80065ce <__pow5mult+0x5a>
 8006604:	4638      	mov	r0, r7
 8006606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660a:	bf00      	nop
 800660c:	08006f20 	.word	0x08006f20

08006610 <__lshift>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6849      	ldr	r1, [r1, #4]
 800661e:	eb0a 0903 	add.w	r9, sl, r3
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	4607      	mov	r7, r0
 8006626:	4616      	mov	r6, r2
 8006628:	f109 0501 	add.w	r5, r9, #1
 800662c:	42ab      	cmp	r3, r5
 800662e:	db32      	blt.n	8006696 <__lshift+0x86>
 8006630:	4638      	mov	r0, r7
 8006632:	f7ff fe2b 	bl	800628c <_Balloc>
 8006636:	2300      	movs	r3, #0
 8006638:	4680      	mov	r8, r0
 800663a:	f100 0114 	add.w	r1, r0, #20
 800663e:	461a      	mov	r2, r3
 8006640:	4553      	cmp	r3, sl
 8006642:	db2b      	blt.n	800669c <__lshift+0x8c>
 8006644:	6920      	ldr	r0, [r4, #16]
 8006646:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800664a:	f104 0314 	add.w	r3, r4, #20
 800664e:	f016 021f 	ands.w	r2, r6, #31
 8006652:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006656:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800665a:	d025      	beq.n	80066a8 <__lshift+0x98>
 800665c:	f1c2 0e20 	rsb	lr, r2, #32
 8006660:	2000      	movs	r0, #0
 8006662:	681e      	ldr	r6, [r3, #0]
 8006664:	468a      	mov	sl, r1
 8006666:	4096      	lsls	r6, r2
 8006668:	4330      	orrs	r0, r6
 800666a:	f84a 0b04 	str.w	r0, [sl], #4
 800666e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006672:	459c      	cmp	ip, r3
 8006674:	fa20 f00e 	lsr.w	r0, r0, lr
 8006678:	d814      	bhi.n	80066a4 <__lshift+0x94>
 800667a:	6048      	str	r0, [r1, #4]
 800667c:	b108      	cbz	r0, 8006682 <__lshift+0x72>
 800667e:	f109 0502 	add.w	r5, r9, #2
 8006682:	3d01      	subs	r5, #1
 8006684:	4638      	mov	r0, r7
 8006686:	f8c8 5010 	str.w	r5, [r8, #16]
 800668a:	4621      	mov	r1, r4
 800668c:	f7ff fe32 	bl	80062f4 <_Bfree>
 8006690:	4640      	mov	r0, r8
 8006692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006696:	3101      	adds	r1, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	e7c7      	b.n	800662c <__lshift+0x1c>
 800669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80066a0:	3301      	adds	r3, #1
 80066a2:	e7cd      	b.n	8006640 <__lshift+0x30>
 80066a4:	4651      	mov	r1, sl
 80066a6:	e7dc      	b.n	8006662 <__lshift+0x52>
 80066a8:	3904      	subs	r1, #4
 80066aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80066b2:	459c      	cmp	ip, r3
 80066b4:	d8f9      	bhi.n	80066aa <__lshift+0x9a>
 80066b6:	e7e4      	b.n	8006682 <__lshift+0x72>

080066b8 <__mcmp>:
 80066b8:	6903      	ldr	r3, [r0, #16]
 80066ba:	690a      	ldr	r2, [r1, #16]
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	b530      	push	{r4, r5, lr}
 80066c0:	d10c      	bne.n	80066dc <__mcmp+0x24>
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	3014      	adds	r0, #20
 80066c6:	3114      	adds	r1, #20
 80066c8:	1884      	adds	r4, r0, r2
 80066ca:	4411      	add	r1, r2
 80066cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066d4:	4295      	cmp	r5, r2
 80066d6:	d003      	beq.n	80066e0 <__mcmp+0x28>
 80066d8:	d305      	bcc.n	80066e6 <__mcmp+0x2e>
 80066da:	2301      	movs	r3, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	42a0      	cmp	r0, r4
 80066e2:	d3f3      	bcc.n	80066cc <__mcmp+0x14>
 80066e4:	e7fa      	b.n	80066dc <__mcmp+0x24>
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ea:	e7f7      	b.n	80066dc <__mcmp+0x24>

080066ec <__mdiff>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	460d      	mov	r5, r1
 80066f2:	4607      	mov	r7, r0
 80066f4:	4611      	mov	r1, r2
 80066f6:	4628      	mov	r0, r5
 80066f8:	4614      	mov	r4, r2
 80066fa:	f7ff ffdd 	bl	80066b8 <__mcmp>
 80066fe:	1e06      	subs	r6, r0, #0
 8006700:	d108      	bne.n	8006714 <__mdiff+0x28>
 8006702:	4631      	mov	r1, r6
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff fdc1 	bl	800628c <_Balloc>
 800670a:	2301      	movs	r3, #1
 800670c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006714:	bfa4      	itt	ge
 8006716:	4623      	movge	r3, r4
 8006718:	462c      	movge	r4, r5
 800671a:	4638      	mov	r0, r7
 800671c:	6861      	ldr	r1, [r4, #4]
 800671e:	bfa6      	itte	ge
 8006720:	461d      	movge	r5, r3
 8006722:	2600      	movge	r6, #0
 8006724:	2601      	movlt	r6, #1
 8006726:	f7ff fdb1 	bl	800628c <_Balloc>
 800672a:	692b      	ldr	r3, [r5, #16]
 800672c:	60c6      	str	r6, [r0, #12]
 800672e:	6926      	ldr	r6, [r4, #16]
 8006730:	f105 0914 	add.w	r9, r5, #20
 8006734:	f104 0214 	add.w	r2, r4, #20
 8006738:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800673c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006740:	f100 0514 	add.w	r5, r0, #20
 8006744:	f04f 0e00 	mov.w	lr, #0
 8006748:	f852 ab04 	ldr.w	sl, [r2], #4
 800674c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006750:	fa1e f18a 	uxtah	r1, lr, sl
 8006754:	b2a3      	uxth	r3, r4
 8006756:	1ac9      	subs	r1, r1, r3
 8006758:	0c23      	lsrs	r3, r4, #16
 800675a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800675e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006762:	b289      	uxth	r1, r1
 8006764:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006768:	45c8      	cmp	r8, r9
 800676a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800676e:	4694      	mov	ip, r2
 8006770:	f845 3b04 	str.w	r3, [r5], #4
 8006774:	d8e8      	bhi.n	8006748 <__mdiff+0x5c>
 8006776:	45bc      	cmp	ip, r7
 8006778:	d304      	bcc.n	8006784 <__mdiff+0x98>
 800677a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800677e:	b183      	cbz	r3, 80067a2 <__mdiff+0xb6>
 8006780:	6106      	str	r6, [r0, #16]
 8006782:	e7c5      	b.n	8006710 <__mdiff+0x24>
 8006784:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006788:	fa1e f381 	uxtah	r3, lr, r1
 800678c:	141a      	asrs	r2, r3, #16
 800678e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006798:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800679c:	f845 3b04 	str.w	r3, [r5], #4
 80067a0:	e7e9      	b.n	8006776 <__mdiff+0x8a>
 80067a2:	3e01      	subs	r6, #1
 80067a4:	e7e9      	b.n	800677a <__mdiff+0x8e>

080067a6 <__d2b>:
 80067a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067aa:	460e      	mov	r6, r1
 80067ac:	2101      	movs	r1, #1
 80067ae:	ec59 8b10 	vmov	r8, r9, d0
 80067b2:	4615      	mov	r5, r2
 80067b4:	f7ff fd6a 	bl	800628c <_Balloc>
 80067b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80067bc:	4607      	mov	r7, r0
 80067be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067c2:	bb34      	cbnz	r4, 8006812 <__d2b+0x6c>
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	f1b8 0300 	subs.w	r3, r8, #0
 80067ca:	d027      	beq.n	800681c <__d2b+0x76>
 80067cc:	a802      	add	r0, sp, #8
 80067ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80067d2:	f7ff fe00 	bl	80063d6 <__lo0bits>
 80067d6:	9900      	ldr	r1, [sp, #0]
 80067d8:	b1f0      	cbz	r0, 8006818 <__d2b+0x72>
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	f1c0 0320 	rsb	r3, r0, #32
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	430b      	orrs	r3, r1
 80067e6:	40c2      	lsrs	r2, r0
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf14      	ite	ne
 80067f4:	2102      	movne	r1, #2
 80067f6:	2101      	moveq	r1, #1
 80067f8:	6139      	str	r1, [r7, #16]
 80067fa:	b1c4      	cbz	r4, 800682e <__d2b+0x88>
 80067fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006800:	4404      	add	r4, r0
 8006802:	6034      	str	r4, [r6, #0]
 8006804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006808:	6028      	str	r0, [r5, #0]
 800680a:	4638      	mov	r0, r7
 800680c:	b003      	add	sp, #12
 800680e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006816:	e7d5      	b.n	80067c4 <__d2b+0x1e>
 8006818:	6179      	str	r1, [r7, #20]
 800681a:	e7e7      	b.n	80067ec <__d2b+0x46>
 800681c:	a801      	add	r0, sp, #4
 800681e:	f7ff fdda 	bl	80063d6 <__lo0bits>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	2101      	movs	r1, #1
 8006828:	6139      	str	r1, [r7, #16]
 800682a:	3020      	adds	r0, #32
 800682c:	e7e5      	b.n	80067fa <__d2b+0x54>
 800682e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006836:	6030      	str	r0, [r6, #0]
 8006838:	6918      	ldr	r0, [r3, #16]
 800683a:	f7ff fdad 	bl	8006398 <__hi0bits>
 800683e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006842:	e7e1      	b.n	8006808 <__d2b+0x62>

08006844 <_calloc_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	fb02 f401 	mul.w	r4, r2, r1
 800684a:	4621      	mov	r1, r4
 800684c:	f000 f856 	bl	80068fc <_malloc_r>
 8006850:	4605      	mov	r5, r0
 8006852:	b118      	cbz	r0, 800685c <_calloc_r+0x18>
 8006854:	4622      	mov	r2, r4
 8006856:	2100      	movs	r1, #0
 8006858:	f7fe fa39 	bl	8004cce <memset>
 800685c:	4628      	mov	r0, r5
 800685e:	bd38      	pop	{r3, r4, r5, pc}

08006860 <_free_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4605      	mov	r5, r0
 8006864:	2900      	cmp	r1, #0
 8006866:	d045      	beq.n	80068f4 <_free_r+0x94>
 8006868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800686c:	1f0c      	subs	r4, r1, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	bfb8      	it	lt
 8006872:	18e4      	addlt	r4, r4, r3
 8006874:	f000 fa29 	bl	8006cca <__malloc_lock>
 8006878:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <_free_r+0x98>)
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	4610      	mov	r0, r2
 800687e:	b933      	cbnz	r3, 800688e <_free_r+0x2e>
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	6014      	str	r4, [r2, #0]
 8006884:	4628      	mov	r0, r5
 8006886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688a:	f000 ba1f 	b.w	8006ccc <__malloc_unlock>
 800688e:	42a3      	cmp	r3, r4
 8006890:	d90c      	bls.n	80068ac <_free_r+0x4c>
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	1862      	adds	r2, r4, r1
 8006896:	4293      	cmp	r3, r2
 8006898:	bf04      	itt	eq
 800689a:	681a      	ldreq	r2, [r3, #0]
 800689c:	685b      	ldreq	r3, [r3, #4]
 800689e:	6063      	str	r3, [r4, #4]
 80068a0:	bf04      	itt	eq
 80068a2:	1852      	addeq	r2, r2, r1
 80068a4:	6022      	streq	r2, [r4, #0]
 80068a6:	6004      	str	r4, [r0, #0]
 80068a8:	e7ec      	b.n	8006884 <_free_r+0x24>
 80068aa:	4613      	mov	r3, r2
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	b10a      	cbz	r2, 80068b4 <_free_r+0x54>
 80068b0:	42a2      	cmp	r2, r4
 80068b2:	d9fa      	bls.n	80068aa <_free_r+0x4a>
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	1858      	adds	r0, r3, r1
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d10b      	bne.n	80068d4 <_free_r+0x74>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	4401      	add	r1, r0
 80068c0:	1858      	adds	r0, r3, r1
 80068c2:	4282      	cmp	r2, r0
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	d1dd      	bne.n	8006884 <_free_r+0x24>
 80068c8:	6810      	ldr	r0, [r2, #0]
 80068ca:	6852      	ldr	r2, [r2, #4]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	4401      	add	r1, r0
 80068d0:	6019      	str	r1, [r3, #0]
 80068d2:	e7d7      	b.n	8006884 <_free_r+0x24>
 80068d4:	d902      	bls.n	80068dc <_free_r+0x7c>
 80068d6:	230c      	movs	r3, #12
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	e7d3      	b.n	8006884 <_free_r+0x24>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	1821      	adds	r1, r4, r0
 80068e0:	428a      	cmp	r2, r1
 80068e2:	bf04      	itt	eq
 80068e4:	6811      	ldreq	r1, [r2, #0]
 80068e6:	6852      	ldreq	r2, [r2, #4]
 80068e8:	6062      	str	r2, [r4, #4]
 80068ea:	bf04      	itt	eq
 80068ec:	1809      	addeq	r1, r1, r0
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	605c      	str	r4, [r3, #4]
 80068f2:	e7c7      	b.n	8006884 <_free_r+0x24>
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	bf00      	nop
 80068f8:	20000210 	.word	0x20000210

080068fc <_malloc_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	1ccd      	adds	r5, r1, #3
 8006900:	f025 0503 	bic.w	r5, r5, #3
 8006904:	3508      	adds	r5, #8
 8006906:	2d0c      	cmp	r5, #12
 8006908:	bf38      	it	cc
 800690a:	250c      	movcc	r5, #12
 800690c:	2d00      	cmp	r5, #0
 800690e:	4606      	mov	r6, r0
 8006910:	db01      	blt.n	8006916 <_malloc_r+0x1a>
 8006912:	42a9      	cmp	r1, r5
 8006914:	d903      	bls.n	800691e <_malloc_r+0x22>
 8006916:	230c      	movs	r3, #12
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	2000      	movs	r0, #0
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	f000 f9d4 	bl	8006cca <__malloc_lock>
 8006922:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <_malloc_r+0xac>)
 8006924:	6814      	ldr	r4, [r2, #0]
 8006926:	4621      	mov	r1, r4
 8006928:	b991      	cbnz	r1, 8006950 <_malloc_r+0x54>
 800692a:	4c20      	ldr	r4, [pc, #128]	; (80069ac <_malloc_r+0xb0>)
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	b91b      	cbnz	r3, 8006938 <_malloc_r+0x3c>
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f98f 	bl	8006c54 <_sbrk_r>
 8006936:	6020      	str	r0, [r4, #0]
 8006938:	4629      	mov	r1, r5
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f98a 	bl	8006c54 <_sbrk_r>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d124      	bne.n	800698e <_malloc_r+0x92>
 8006944:	230c      	movs	r3, #12
 8006946:	6033      	str	r3, [r6, #0]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f9bf 	bl	8006ccc <__malloc_unlock>
 800694e:	e7e4      	b.n	800691a <_malloc_r+0x1e>
 8006950:	680b      	ldr	r3, [r1, #0]
 8006952:	1b5b      	subs	r3, r3, r5
 8006954:	d418      	bmi.n	8006988 <_malloc_r+0x8c>
 8006956:	2b0b      	cmp	r3, #11
 8006958:	d90f      	bls.n	800697a <_malloc_r+0x7e>
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	50cd      	str	r5, [r1, r3]
 800695e:	18cc      	adds	r4, r1, r3
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f9b3 	bl	8006ccc <__malloc_unlock>
 8006966:	f104 000b 	add.w	r0, r4, #11
 800696a:	1d23      	adds	r3, r4, #4
 800696c:	f020 0007 	bic.w	r0, r0, #7
 8006970:	1ac3      	subs	r3, r0, r3
 8006972:	d0d3      	beq.n	800691c <_malloc_r+0x20>
 8006974:	425a      	negs	r2, r3
 8006976:	50e2      	str	r2, [r4, r3]
 8006978:	e7d0      	b.n	800691c <_malloc_r+0x20>
 800697a:	428c      	cmp	r4, r1
 800697c:	684b      	ldr	r3, [r1, #4]
 800697e:	bf16      	itet	ne
 8006980:	6063      	strne	r3, [r4, #4]
 8006982:	6013      	streq	r3, [r2, #0]
 8006984:	460c      	movne	r4, r1
 8006986:	e7eb      	b.n	8006960 <_malloc_r+0x64>
 8006988:	460c      	mov	r4, r1
 800698a:	6849      	ldr	r1, [r1, #4]
 800698c:	e7cc      	b.n	8006928 <_malloc_r+0x2c>
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d005      	beq.n	80069a4 <_malloc_r+0xa8>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f95a 	bl	8006c54 <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d0cf      	beq.n	8006944 <_malloc_r+0x48>
 80069a4:	6025      	str	r5, [r4, #0]
 80069a6:	e7db      	b.n	8006960 <_malloc_r+0x64>
 80069a8:	20000210 	.word	0x20000210
 80069ac:	20000214 	.word	0x20000214

080069b0 <__ssputs_r>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	688e      	ldr	r6, [r1, #8]
 80069b6:	429e      	cmp	r6, r3
 80069b8:	4682      	mov	sl, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	4690      	mov	r8, r2
 80069be:	4699      	mov	r9, r3
 80069c0:	d837      	bhi.n	8006a32 <__ssputs_r+0x82>
 80069c2:	898a      	ldrh	r2, [r1, #12]
 80069c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069c8:	d031      	beq.n	8006a2e <__ssputs_r+0x7e>
 80069ca:	6825      	ldr	r5, [r4, #0]
 80069cc:	6909      	ldr	r1, [r1, #16]
 80069ce:	1a6f      	subs	r7, r5, r1
 80069d0:	6965      	ldr	r5, [r4, #20]
 80069d2:	2302      	movs	r3, #2
 80069d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	443b      	add	r3, r7
 80069e2:	429d      	cmp	r5, r3
 80069e4:	bf38      	it	cc
 80069e6:	461d      	movcc	r5, r3
 80069e8:	0553      	lsls	r3, r2, #21
 80069ea:	d530      	bpl.n	8006a4e <__ssputs_r+0x9e>
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7ff ff85 	bl	80068fc <_malloc_r>
 80069f2:	4606      	mov	r6, r0
 80069f4:	b950      	cbnz	r0, 8006a0c <__ssputs_r+0x5c>
 80069f6:	230c      	movs	r3, #12
 80069f8:	f8ca 3000 	str.w	r3, [sl]
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	6921      	ldr	r1, [r4, #16]
 8006a10:	f7fe f952 	bl	8004cb8 <memcpy>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	6126      	str	r6, [r4, #16]
 8006a22:	6165      	str	r5, [r4, #20]
 8006a24:	443e      	add	r6, r7
 8006a26:	1bed      	subs	r5, r5, r7
 8006a28:	6026      	str	r6, [r4, #0]
 8006a2a:	60a5      	str	r5, [r4, #8]
 8006a2c:	464e      	mov	r6, r9
 8006a2e:	454e      	cmp	r6, r9
 8006a30:	d900      	bls.n	8006a34 <__ssputs_r+0x84>
 8006a32:	464e      	mov	r6, r9
 8006a34:	4632      	mov	r2, r6
 8006a36:	4641      	mov	r1, r8
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	f000 f92d 	bl	8006c98 <memmove>
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	1b9b      	subs	r3, r3, r6
 8006a42:	60a3      	str	r3, [r4, #8]
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	441e      	add	r6, r3
 8006a48:	6026      	str	r6, [r4, #0]
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e7dc      	b.n	8006a08 <__ssputs_r+0x58>
 8006a4e:	462a      	mov	r2, r5
 8006a50:	f000 f93d 	bl	8006cce <_realloc_r>
 8006a54:	4606      	mov	r6, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1e2      	bne.n	8006a20 <__ssputs_r+0x70>
 8006a5a:	6921      	ldr	r1, [r4, #16]
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	f7ff feff 	bl	8006860 <_free_r>
 8006a62:	e7c8      	b.n	80069f6 <__ssputs_r+0x46>

08006a64 <_svfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	461d      	mov	r5, r3
 8006a6a:	898b      	ldrh	r3, [r1, #12]
 8006a6c:	061f      	lsls	r7, r3, #24
 8006a6e:	b09d      	sub	sp, #116	; 0x74
 8006a70:	4680      	mov	r8, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4616      	mov	r6, r2
 8006a76:	d50f      	bpl.n	8006a98 <_svfiprintf_r+0x34>
 8006a78:	690b      	ldr	r3, [r1, #16]
 8006a7a:	b96b      	cbnz	r3, 8006a98 <_svfiprintf_r+0x34>
 8006a7c:	2140      	movs	r1, #64	; 0x40
 8006a7e:	f7ff ff3d 	bl	80068fc <_malloc_r>
 8006a82:	6020      	str	r0, [r4, #0]
 8006a84:	6120      	str	r0, [r4, #16]
 8006a86:	b928      	cbnz	r0, 8006a94 <_svfiprintf_r+0x30>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	f8c8 3000 	str.w	r3, [r8]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a92:	e0c8      	b.n	8006c26 <_svfiprintf_r+0x1c2>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	6163      	str	r3, [r4, #20]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9c:	2320      	movs	r3, #32
 8006a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aa2:	2330      	movs	r3, #48	; 0x30
 8006aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa8:	9503      	str	r5, [sp, #12]
 8006aaa:	f04f 0b01 	mov.w	fp, #1
 8006aae:	4637      	mov	r7, r6
 8006ab0:	463d      	mov	r5, r7
 8006ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ab6:	b10b      	cbz	r3, 8006abc <_svfiprintf_r+0x58>
 8006ab8:	2b25      	cmp	r3, #37	; 0x25
 8006aba:	d13e      	bne.n	8006b3a <_svfiprintf_r+0xd6>
 8006abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ac0:	d00b      	beq.n	8006ada <_svfiprintf_r+0x76>
 8006ac2:	4653      	mov	r3, sl
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4640      	mov	r0, r8
 8006aca:	f7ff ff71 	bl	80069b0 <__ssputs_r>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f000 80a4 	beq.w	8006c1c <_svfiprintf_r+0x1b8>
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	4453      	add	r3, sl
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	783b      	ldrb	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 809d 	beq.w	8006c1c <_svfiprintf_r+0x1b8>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af4:	931a      	str	r3, [sp, #104]	; 0x68
 8006af6:	462f      	mov	r7, r5
 8006af8:	2205      	movs	r2, #5
 8006afa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006afe:	4850      	ldr	r0, [pc, #320]	; (8006c40 <_svfiprintf_r+0x1dc>)
 8006b00:	f7f9 fb76 	bl	80001f0 <memchr>
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	b9d0      	cbnz	r0, 8006b3e <_svfiprintf_r+0xda>
 8006b08:	06d9      	lsls	r1, r3, #27
 8006b0a:	bf44      	itt	mi
 8006b0c:	2220      	movmi	r2, #32
 8006b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b12:	071a      	lsls	r2, r3, #28
 8006b14:	bf44      	itt	mi
 8006b16:	222b      	movmi	r2, #43	; 0x2b
 8006b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b1c:	782a      	ldrb	r2, [r5, #0]
 8006b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8006b20:	d015      	beq.n	8006b4e <_svfiprintf_r+0xea>
 8006b22:	9a07      	ldr	r2, [sp, #28]
 8006b24:	462f      	mov	r7, r5
 8006b26:	2000      	movs	r0, #0
 8006b28:	250a      	movs	r5, #10
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b30:	3b30      	subs	r3, #48	; 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d94d      	bls.n	8006bd2 <_svfiprintf_r+0x16e>
 8006b36:	b1b8      	cbz	r0, 8006b68 <_svfiprintf_r+0x104>
 8006b38:	e00f      	b.n	8006b5a <_svfiprintf_r+0xf6>
 8006b3a:	462f      	mov	r7, r5
 8006b3c:	e7b8      	b.n	8006ab0 <_svfiprintf_r+0x4c>
 8006b3e:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <_svfiprintf_r+0x1dc>)
 8006b40:	1a80      	subs	r0, r0, r2
 8006b42:	fa0b f000 	lsl.w	r0, fp, r0
 8006b46:	4318      	orrs	r0, r3
 8006b48:	9004      	str	r0, [sp, #16]
 8006b4a:	463d      	mov	r5, r7
 8006b4c:	e7d3      	b.n	8006af6 <_svfiprintf_r+0x92>
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	1d11      	adds	r1, r2, #4
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	9103      	str	r1, [sp, #12]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	db01      	blt.n	8006b5e <_svfiprintf_r+0xfa>
 8006b5a:	9207      	str	r2, [sp, #28]
 8006b5c:	e004      	b.n	8006b68 <_svfiprintf_r+0x104>
 8006b5e:	4252      	negs	r2, r2
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	9207      	str	r2, [sp, #28]
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	783b      	ldrb	r3, [r7, #0]
 8006b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6c:	d10c      	bne.n	8006b88 <_svfiprintf_r+0x124>
 8006b6e:	787b      	ldrb	r3, [r7, #1]
 8006b70:	2b2a      	cmp	r3, #42	; 0x2a
 8006b72:	d133      	bne.n	8006bdc <_svfiprintf_r+0x178>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	1d1a      	adds	r2, r3, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	9203      	str	r2, [sp, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb8      	it	lt
 8006b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b84:	3702      	adds	r7, #2
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	4d2e      	ldr	r5, [pc, #184]	; (8006c44 <_svfiprintf_r+0x1e0>)
 8006b8a:	7839      	ldrb	r1, [r7, #0]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7f9 fb2e 	bl	80001f0 <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_svfiprintf_r+0x142>
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	1b40      	subs	r0, r0, r5
 8006b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b9e:	9b04      	ldr	r3, [sp, #16]
 8006ba0:	4303      	orrs	r3, r0
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	7839      	ldrb	r1, [r7, #0]
 8006ba8:	4827      	ldr	r0, [pc, #156]	; (8006c48 <_svfiprintf_r+0x1e4>)
 8006baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bae:	2206      	movs	r2, #6
 8006bb0:	1c7e      	adds	r6, r7, #1
 8006bb2:	f7f9 fb1d 	bl	80001f0 <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d038      	beq.n	8006c2c <_svfiprintf_r+0x1c8>
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <_svfiprintf_r+0x1e8>)
 8006bbc:	bb13      	cbnz	r3, 8006c04 <_svfiprintf_r+0x1a0>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	444b      	add	r3, r9
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	e76d      	b.n	8006aae <_svfiprintf_r+0x4a>
 8006bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	460f      	mov	r7, r1
 8006bda:	e7a6      	b.n	8006b2a <_svfiprintf_r+0xc6>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	3701      	adds	r7, #1
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	4619      	mov	r1, r3
 8006be4:	250a      	movs	r5, #10
 8006be6:	4638      	mov	r0, r7
 8006be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bec:	3a30      	subs	r2, #48	; 0x30
 8006bee:	2a09      	cmp	r2, #9
 8006bf0:	d903      	bls.n	8006bfa <_svfiprintf_r+0x196>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c8      	beq.n	8006b88 <_svfiprintf_r+0x124>
 8006bf6:	9105      	str	r1, [sp, #20]
 8006bf8:	e7c6      	b.n	8006b88 <_svfiprintf_r+0x124>
 8006bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4607      	mov	r7, r0
 8006c02:	e7f0      	b.n	8006be6 <_svfiprintf_r+0x182>
 8006c04:	ab03      	add	r3, sp, #12
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <_svfiprintf_r+0x1ec>)
 8006c0c:	a904      	add	r1, sp, #16
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f7fe f8fa 	bl	8004e08 <_printf_float>
 8006c14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c18:	4681      	mov	r9, r0
 8006c1a:	d1d6      	bne.n	8006bca <_svfiprintf_r+0x166>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	065b      	lsls	r3, r3, #25
 8006c20:	f53f af35 	bmi.w	8006a8e <_svfiprintf_r+0x2a>
 8006c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c26:	b01d      	add	sp, #116	; 0x74
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	ab03      	add	r3, sp, #12
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4622      	mov	r2, r4
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <_svfiprintf_r+0x1ec>)
 8006c34:	a904      	add	r1, sp, #16
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7fe fb9c 	bl	8005374 <_printf_i>
 8006c3c:	e7ea      	b.n	8006c14 <_svfiprintf_r+0x1b0>
 8006c3e:	bf00      	nop
 8006c40:	08006f2c 	.word	0x08006f2c
 8006c44:	08006f32 	.word	0x08006f32
 8006c48:	08006f36 	.word	0x08006f36
 8006c4c:	08004e09 	.word	0x08004e09
 8006c50:	080069b1 	.word	0x080069b1

08006c54 <_sbrk_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4c06      	ldr	r4, [pc, #24]	; (8006c70 <_sbrk_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f7fa fc10 	bl	8001484 <_sbrk>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_sbrk_r+0x1a>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_sbrk_r+0x1a>
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20000e84 	.word	0x20000e84

08006c74 <__ascii_mbtowc>:
 8006c74:	b082      	sub	sp, #8
 8006c76:	b901      	cbnz	r1, 8006c7a <__ascii_mbtowc+0x6>
 8006c78:	a901      	add	r1, sp, #4
 8006c7a:	b142      	cbz	r2, 8006c8e <__ascii_mbtowc+0x1a>
 8006c7c:	b14b      	cbz	r3, 8006c92 <__ascii_mbtowc+0x1e>
 8006c7e:	7813      	ldrb	r3, [r2, #0]
 8006c80:	600b      	str	r3, [r1, #0]
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	1c10      	adds	r0, r2, #0
 8006c86:	bf18      	it	ne
 8006c88:	2001      	movne	r0, #1
 8006c8a:	b002      	add	sp, #8
 8006c8c:	4770      	bx	lr
 8006c8e:	4610      	mov	r0, r2
 8006c90:	e7fb      	b.n	8006c8a <__ascii_mbtowc+0x16>
 8006c92:	f06f 0001 	mvn.w	r0, #1
 8006c96:	e7f8      	b.n	8006c8a <__ascii_mbtowc+0x16>

08006c98 <memmove>:
 8006c98:	4288      	cmp	r0, r1
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	eb01 0302 	add.w	r3, r1, r2
 8006ca0:	d807      	bhi.n	8006cb2 <memmove+0x1a>
 8006ca2:	1e42      	subs	r2, r0, #1
 8006ca4:	4299      	cmp	r1, r3
 8006ca6:	d00a      	beq.n	8006cbe <memmove+0x26>
 8006ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cb0:	e7f8      	b.n	8006ca4 <memmove+0xc>
 8006cb2:	4283      	cmp	r3, r0
 8006cb4:	d9f5      	bls.n	8006ca2 <memmove+0xa>
 8006cb6:	1881      	adds	r1, r0, r2
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	42d3      	cmn	r3, r2
 8006cbc:	d100      	bne.n	8006cc0 <memmove+0x28>
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cc8:	e7f7      	b.n	8006cba <memmove+0x22>

08006cca <__malloc_lock>:
 8006cca:	4770      	bx	lr

08006ccc <__malloc_unlock>:
 8006ccc:	4770      	bx	lr

08006cce <_realloc_r>:
 8006cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	b921      	cbnz	r1, 8006ce2 <_realloc_r+0x14>
 8006cd8:	4611      	mov	r1, r2
 8006cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cde:	f7ff be0d 	b.w	80068fc <_malloc_r>
 8006ce2:	b922      	cbnz	r2, 8006cee <_realloc_r+0x20>
 8006ce4:	f7ff fdbc 	bl	8006860 <_free_r>
 8006ce8:	4625      	mov	r5, r4
 8006cea:	4628      	mov	r0, r5
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cee:	f000 f821 	bl	8006d34 <_malloc_usable_size_r>
 8006cf2:	42a0      	cmp	r0, r4
 8006cf4:	d20f      	bcs.n	8006d16 <_realloc_r+0x48>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff fdff 	bl	80068fc <_malloc_r>
 8006cfe:	4605      	mov	r5, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d0f2      	beq.n	8006cea <_realloc_r+0x1c>
 8006d04:	4631      	mov	r1, r6
 8006d06:	4622      	mov	r2, r4
 8006d08:	f7fd ffd6 	bl	8004cb8 <memcpy>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff fda6 	bl	8006860 <_free_r>
 8006d14:	e7e9      	b.n	8006cea <_realloc_r+0x1c>
 8006d16:	4635      	mov	r5, r6
 8006d18:	e7e7      	b.n	8006cea <_realloc_r+0x1c>

08006d1a <__ascii_wctomb>:
 8006d1a:	b149      	cbz	r1, 8006d30 <__ascii_wctomb+0x16>
 8006d1c:	2aff      	cmp	r2, #255	; 0xff
 8006d1e:	bf85      	ittet	hi
 8006d20:	238a      	movhi	r3, #138	; 0x8a
 8006d22:	6003      	strhi	r3, [r0, #0]
 8006d24:	700a      	strbls	r2, [r1, #0]
 8006d26:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d2a:	bf98      	it	ls
 8006d2c:	2001      	movls	r0, #1
 8006d2e:	4770      	bx	lr
 8006d30:	4608      	mov	r0, r1
 8006d32:	4770      	bx	lr

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
